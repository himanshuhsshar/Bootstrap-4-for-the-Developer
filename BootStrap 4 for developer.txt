Course Overview
Course Overview
Hi everyone. My name is Mario Macari, and welcome to my course, Bootstrap 4 for the Developer. I'm a graphic designer, coder, college professor, and Pluralsight author. I've been working with graphic design in coding and website creation for a long time, and I have been working with computers for most of my career. I have also been teaching for many of those years. I hope you will enjoy this course and sign up for Pluralsight. com. As a professor, I can tell you Pluralsight. com has some of the best courses out there. In this course we'll learn about Bootstrap 4. One of the most efficient ways to get a good looking website by simply adding classes to the class attribute in your HTML tags. We'll see how easy it is to make responsive websites with nav bars, alerts, modals, jumbotrons, pop-overs, carousels, columns, and rows, and responsive layout. By the end of this course you will have gone through most of the Bootstrap documentation and have tried many of the features. Remember, Bootstrap's the world's most popular front-end component library, and it has amazing layout abilities, content addition techniques, components, and utilities. I hope you'll join me on this journey through Bootstrap. Welcome to Bootstrap 4 for the Developer.

Introduction and Setting up Bootstrap
Introduction
Hi. This is Mario Macari with Pluralsight, and welcome to the course, Bootstrap 4 for the Developer. In this course we'll learn about the ins and outs of Bootstrap 4, and put this magnificent CSS library to work for you as a developer. Seeing how easy Bootstrap is and seeing responsive websites spring to life will be fun. Instead of creating or typing in all the CSS to get a website to look and be responsive all you need to do with this library is type in a few classes and the class attribute of your HTML tag. In this course we'll learn about Bootstrap 4's many parts. We'll learn about installing Bootstrap from the CDN, have it local, or use install packages. Then we'll explore responsive web page design the Bootstrap way. Next, we'll learn about setting up navigation. After that we'll learn about typography. From there we'll explore buttons. Then it's on to images, tables, and the magic of cards. We discover how easy form are to stylize in Bootstrap. Then we cover the Bootstrap components, such as jumbotrons, carousels, and accordions, and finally, we'll talk about pop-overs, and how JavaScript and Bootstrap are best friends forever. It'll be fun, so let's get started.

Using the Bootstrap CDN
In this video we'll take a look at downloading the Bootstrap CDN or Content Delivery Network, and that's how we're going to do all the exercises inside this course with this Bootstrap CDN. On my desktop I'll create a new folder, and we'll rename it bootstrap-cdn. Move it to the upper corner of my video screen. You can see right here I have open the getbootstrap. com website, and I'm going to click on the Get Started button, and that will take us to the Introduction page, and you can see there's a number of methods for getting Bootstrap to work with your web page. I'm going to go down to the Starter template and click Copy. I'll move my browser out of the way, and right behind that we have Brackets, and that is the code editor that we're going to use inside this course. I'm going to drag the empty bootstrap-cdn folder we just created over to the left side bar of brackets, and that will install it as the website folder. Then I'll right click on the sidebar and choose New File. I'm going to adjust my interface so we can see everything a little bit better. Name this file that we just created index. html. Hit the Enter key, and now you can see both the bootstrap-cdn folder and the index. html. There's nothing in it currently, so what I want to do is go ahead and right-click and paste what we just copied from the getbootstrap website, and there's our very first Bootstrap page. All of the links are there to get this whole Bootstrap thing to work. I'm going to save this, move over brackets again, and I'm going to click on the lightning bolt button here, which will activate Chrome, and Brackets creates a temporary web server we can use to host our page, and there is our message, hello, world that's been built into the Bootstrap for CDN copy and paste web code. I'll go back to the first tab, and then I'm going to type in brackets. io, which is a website for our code editor. Here it is. Now a very important part of this course is also going to be an extension called Emmet, and this time we'll go to the emmet. io website, the home of Emmet, click on the Download button, and here are all the code editors that Emmet works with. I'm going to click on the Brackets tab, and here are the directions for installation. Move this over to the side, and it says, go to File, Extension Manager, so I'll find that, and then I'll search for Emmet, and then I'll click on the Install button. Now, currently, mine's already installed, but that's how you would install it. Once it's installed you hit the Close button, and now we're ready to go with Brackets and Emmet inside this course. In the next clip I'll show you other ways of installing Bootstrap, and I'll see you there.

Other Ways of Installing Bootstrap
In this clip we'll take a look at other ways of installing Bootstrap. There are multiple ways of adding Bootstrap 4 to your project. Here we are again, in the Bootstrap 4 home page. We already talked about the first way of doing it, which is using the CDN, which you can get by clicking on this large Get started button. The next way is to download the Bootstrap library by clicking on the Download button. This will send a file to wherever you want on your hard drive. If we scroll down you can see the installation card, which will lead us to the installation documents. In the second column here you can also see that there's a link to the CSS, or if you just want to use JavaScript, Popper. js, or jQuery. I'll click on the Read install docs button. That takes us to the Download page. Again, we have an encore of the download button. I'll click it again to show the zip file fly into my downloads folder. Under that you can access the source files. In this version of Bootstrap Sass has become the go to CSS pre-processor, and the source files are here for you to manipulate to your hearts content. Next, we again, have the CDN links listed. Bootstrap makes heavy use of Popper. js, and it's a tiny, zero independent JavaScript library. You can find out more about it on the popper. js website at popper. js. org. You use popper. js to manage poppers. After that we have the node command install line. You can also handle the jQuery as separate units or use the whole Bootstrap for jQuery library. Notice the Sass stuff is here again, and there's also a non-minified precompiled CSS. Ruby is covered as well with RubyGems and the Gemfile command line. Then we have Composer for PHP and NuGet for. NET. So that's a look at all the different ways to install. In the next clip we'll look at Bootstrap themes, and I'll see you there.

Bootstrap Themes
In this clip we're going to take a look at Bootstrap themes, so I'm back on the getbootstrap. com website, and I'm going to click on the Themes button in the navigation bar. We're taken right over to the Build anything page, and if you scroll down slowly you'll be able to see all the different themes that are available for Bootstrap 4, which you can purchase for your own website, and there's also Categories there if you're looking for different types of websites that are available in Bootstrap 4, and if you create your own themes you can sell them here as well. You can probably find many more Bootstrap themes on the internet as time goes by, so that's a look at Bootstrap themes.

Summary
In this module we learned about setting up Bootstrap. We started by using the Bootstrap CDN. We discovered other ways to install Bootstrap. Finally, we talked about Bootstrap themes for purchase. In the next module we'll talk a little bit more about graphic design, and then get into responsive web layout using Bootstrap.

Graphic Design and Responsive Layout
Introduction
In this module we learn about Graphic Design and Responsive Layout. We'll start by talking about the four basic principles of graphic design. Next, we'll discover Bootstrap Background Colors. We'll learn about containers and rows for building responsive layouts. We will add media breakpoints and watch the action. We'll talk about the grid system for multi-column layouts, and then we learn to align and offset those columns. We'll add padding and margins and talk about display options. Finally, we'll see how Bootstrap 4 implements the CSS flexible box module. So let's get started.

The Four Principles of Graphic Design
This is not a carp, it's a picture of a carp, and I put it here to help you remember the four principles of graphic design, Contrast, Alignment, Repetition, and Proximity. Some people prefer to say Contrast, Repetition, Alignment, and Proximity, but that acronym is a little bit misleading in what it represents. Not that a carp is really all that good looking, in my opinion, but I think it lends itself to remembering the acronym a little better. All these concepts are linked together in graphic design like jigsaw puzzle pieces fit together. The concepts are used by the creators of Bootstrap to ensure you have a good looking, as well as responsive web page. Contrast is the condition of items being strikingly different from each other, normally when they are close to each other, the state of one or more elements being strikingly different from other elements on the page, typically in juxtaposition or close association. Alignment allows a page to act as a whole unit rather than a clumped together look. You put your elements into appropriate relative or correct positions, all the elements are placed purposely without randomness, and have a visual relationship with an additional part on the page. Repetition repeats a various element in your design in connection to the other elements. The recurrence of an element, the reiteration of a shape, color, texture, thickness of an element. A recurring theme that augments the arrangement and fortifies visual harmony. Proximity groups things together to show you a connection between the grouped objects. The nearness in space are a relationship of the elements. Elements become a single visual building block. Unity and organization is formed, making it easier to understand the point and get rid of confusion, so these four principles are instrumental in making a good looking web page. The creators of Bootstrap use these concepts simultaneously. I'm showing you these concepts here to prove to you that there's a lot going on behind the scenes in Bootstrap, and that you can use all these concepts in Bootstrap and never give it a second thought. Graphic design is intuitive in Bootstrap, and is as easy as adding a class attribute to your HTML tag, as you'll see in all the upcoming clips and modules. So in the next clip we'll start by talking about Bootstrap native colors, and I'll see you there.

Background Colors
In this clip I want to show you Bootstrap background colors, so when we start talking about graphic design and responsive layout in Bootstrap you have areas that you can see. I have my working file open, and what I want to do is start off by doing conventional and coded CSS, so you can see the difference between that and Bootstrap. Before we get started, here is a chart of all the colors that are inside of Bootstrap 4, and another chart showing you the hexadecimal equivalents. Right after the opening body tag I'm going to type in a div, and we'll give it a class of myDiv, and that is my class that I just made up. Then we'll give it an id of red, close off the div, and in between there we'll put in Hello Bootstrap, put my cursor at the end of the line and duplicate it, and in this one I'll change the id from red to green. Now I'll put some space underneath the title tag and we'll type in style tags. I'll open those up, and I'm going to put a dot with myDiv after it. Curly braces open those up. We'll set the width equal to 300px, the height equal to 300px, the margin equal to 20px on the top and bottom, and 10px on the left and right. Padding will set the 20px all the way around, and then we'll set the color of the text to white, and we'll display this as an inline-block, so that we can see the squares next to each other. Underneath it I want to set my two colors, so I'll set up the IDs of hashtag red, curly braces, open those up. Then we'll set the background-color, use my arrow key and go to it, hit Enter, and we'll set that to red semicolon, and I'm going to copy this entire rule right here, and paste it right underneath, and we'll change red to green, and then I'll also change the id selector to green. So going into Chrome let's pretend that this is what we're going to show the client. The client looks at it and says, I don't want those colors. I want the red to be purple, and I want the green to be orange, but now we're stuck because we have those id names named after the color, and we might be married to those id names because our website is huge, and we didn't use Sass, so Bootstrap gets around that by using different words instead of color names, and that's the brilliance of it. So here's a chart showing you all the Bootstrap color names. We have primary for blue, secondary for gray, success for green, danger for red, warning is amber, info is cyan, dark is dark, and white is white, and transparent is transparent, and once more, here's a hexadecimal equivalent chart for your viewing pleasure. Going back to Brackets, I'm going to scroll underneath our original divs, and I'll put in a horizontal rule HTML tag, and then I'll copy the second one to my clipboard, paste it right underneath the hr tag, and eliminate the id name, and inside the class I will put in some Bootstrap. So the first class is bg for background, hyphen, and then the word primary, and in Chrome now you can see we have a primary blue background against a reverse style Hello Bootstrap in our div. First, I'll go back up to my styles, and I'll change 300 to 200, so we can see more of them across the screen, and I'll go back, and put my cursor at the end of the opening div, and I'll duplicate it four more times. I'll copy all of these to my clipboard. Underneath I'll put another hr tag, and I'll paste them. So now we have two rows of divs. I'll change the second one to secondary for the gray color, the third one to success for a green color, the fourth one to danger for a red color, and the fifth one to warning for an amber color. Go down to the second row and change the sixth one to info for a cyan color, the seventh one to light for a light gray color, then we'll change the next one to dark for a dark color, and the second to last one to white, and this time I'll make the text dark. We'll cover text colors in a different clip in a later module, and the final one will become transparent, and I'll, again, make the text dark. Change the bg-light with text-dark too, so you can see it. Going over to Chrome I'll pull up the interface, and here are all the Bootstrap background colors. In the next clip we'll look at Bootstrap containers and rows and I'll see you there.

Containers and Rows
In this clip we'll be looking at Bootstrap Containers and Rows, and I have my working file open. I'm going to create a div, and we'll give it a class of myDiv, and that's my own class. Then we'll give it a background color of bg-primary. Close off the div. I'm going to go up after the title tag and add some room, and then we'll put in some style tags. Open those up, add a dot, and myDiv. Curly braces open those up. We'll set the width equal to 100% of the parent container. We'll set the height to 200px, and right away in Chrome now you can see the area we're working on, and it's responsive. It goes edge to edge. Back to Brackets. I'm going to copy this div to my clipboard, make some room, add a horizontal rule tag, and add a new div. This'll be a class of container. Close off that div and open it up, and then I'll paste what I just copied to my clipboard into that div. Go back to Chrome. You can see that this div is no longer edge to edge, and it's actually within a certain area, so right away the container adds margin and padding to your website. I'm going to go back to the myDiv rule. I'll add a background, give it a URL, quotation marks, set it to img/header. jpg, and then we'll say no-repeat, and we'll say center center. Add a new line. Background-size is cover. Return to Chrome and refresh it, and now you can see a white rabbit inside of the divs. As I resize the browser window you can see the lower one jumping between sizes, and those are the Bootstrap 4 breakpoints that we're going to talk about in the next clip. The top one flows smoothly, and the bottom one breaks at breakpoints. Go back to Brackets, scroll down to my container div, copy the whole thing to my clipboard, and paste it underneath it. Then in a second container div I'll add -fluid. Return back to Chrome. Now you can see we have a third style. This time, because it's fluid, it's a little bit wiser than the top one. If I move the browser window back and forth you can see that that image is also a smooth resizing. Go back to Brackets, add a horizontal rule tag, and now I want to add a div with a class of container. Close that off and open it up, and I want to add another div inside there, and this one's going to have a class of row. So when you're doing responsive page layout in Bootstrap you have a container div, which is optional, but in order to have multiple column layouts you're always going to need to put the columns inside of row tags. I'm going to open up the row tags. I'll add a new div, and we'll give it a class of myRow, column, bg-success, so it has a green background. Close off that div. I'm going to duplicate it two more times. Change the second one to warning, and the third one to danger. Go back to Chrome, and they're there at the very bottom, but we can't see them because they're just thin lines right now. So I'll go back to Brackets, scroll up to myDiv, add a myRow rule; curly braces open those up. Inside we'll set the width to 100%, and this time we'll give it a height of 100px, so you can see something. Go back to Chrome, and refresh the page, and there's three divs that we just created in the colors that we set as the background colors. Go back to Brackets. I'm going to copy the entire row div, put some room after it, and paste it again. Eliminate the second one, and we'll change this one to primary, and this one to info. Return back to Chrome, and now you can see we have a two column layout. So Bootstrap is based on a 12 column layout, which we'll get into in a little bit, and this is a sample of three columns and two columns. In the next clip we'll talk about media breakpoints, and I'll see you there.

Media Breakpoints
In this clip we're going to take a look at media breakpoints, and I have a chart showing you the breakpoints that are contained within Bootstrap 4. So starting from biggest to smallest, we have the extra-large size, which is 1200px, the 992px size, which is LG or large, the 768px layout, which is medium or MD, and finally, the 576px layout, which is small or SM. So when you're referring to sizes inside of Bootstrap you usually refer to them as XL, LG, MD, and SM. Then we also have a breakpoint for 575. 98px, and below that, which is called extra small, and there's a few more in the documentation if you have a phone horizontal or vertical layout, and the same thing with a tablet. So those are the basic layouts that we have. If we jump over to our working file I'm going to add an h1 tag. In inside there I'm just going to say Breakpoints in Bootstrap 4. Use my arrow key and go back to the beginning, and I'll add a class to the h1 tag of text-center, which is something we're going to talk about in the typography module. Then we also have display-3, and that is a size in Bootstrap 4, which again, we'll talk about in the typography module. Then I'll add margin vertical a setting of two, and again, we'll cover that one in an upcoming clip in this module. I'll scroll up to the top, and I'll add style tags underneath my title tag, open them up, and then I'll add an at media, parentheses, with a min-width of 576px. In inside there we'll set a body rule, and we'll just say the background color of the body rule is cyan. Semicolon, duplicate it three more times. Change the second one to 768px, the third one to 992px, and the fourth one to 1200px, and then we'll change the last color to yellow, the third one to lightgreen, and the fourth one to lightblue. Go over to Chrome, and now as I resize the page you can see precisely where those breakpoints are going to kick in by the color background changes. So going from large to medium to small to extra small. Once we get down to the phone size the whole thing turns white. So I'll go back up again, go back to Brackets, and this time I'm going to copy this line to my clipboard, and paste it underneath, and we'll change the 1200 to 575px. I'll change the color to gray, and I'll change the word minimum to maximum, min to max. Now if we go back to Chrome and I resize large, and then back to small, you can see at the smaller size it's gray, so we do have control over all those breakpoints. In this next clip we're going to talk about the grid system, and I'll see you there.

The Grid System
In this clip we'll be looking at the Bootstrap Grid System. I'm going to start off in my working file by typing the word section, and we'll give it a class of container. Close off the section. You can use HTML semantic tags anyway you'd like to. It doesn't have to be a div. It could be a section on the side or whatever. I'm going to add inside there another section, and we'll give this one a class of row. Close that one off and open it up. Right after the title tag I'm going to add style tags. Open those up, and we'll add a div class with curly braces. Open those up, and we'll put in margin-top equals 20px, semicolon, new line, and then we'll set the border, and we'll use the border shortcut of 1px solid black or hashtag 000. Scroll down to our section where we're working. I'll add in a new div, and I'll give it a class equal to column, and a column is simply a vertical area inside of Bootstrap 4. You can have multiple columns inside of a row, so I'll close off this column div, and I'll type in their equal. I'm going to readjust my interfaces, so you can see it more. Put my cursor at the end and duplicate it 11 more times, so we have 12 in total. And now you can see we have a 12 column grid layout, and the 12 column grid layout has its history in newspapers because when you had multiple editions coming out in a single day you needed to lay them out quickly, and 12 columns can easily be divided into halves, quarters, or thirds. So that made it an easy layout to achieve. I'm going to resize my browser window, and you can see they start stacking automatically once you get down to a smaller size. Go back to Brackets. I'm going to delete all but four of these, put a space in between there, and I'll add a new div, and this time we'll give it a class of w-100, and that's going to take up the entire width of the parent container, so you can separate these columns, and now if you look down inside of Chrome we have a, well, it's the div, but we have a border around it, so it looks like a rule. I'm going to resize this, open it up, and you can see the interaction. Get rid of this div we just typed in. I'm going to get rid of this fourth div, close up the space in between them, hold down my Option key and slide upwards after the l, delete the word equal, retype in the word Auto. Then in the second class I'll type hyphen eight, and in the third one I'll type hyphen two. So we have 8 and 2, that's 10. We need it to equal 12, and that's what the auto does. It automatically makes the remaining column whatever you're missing. In this case, it would be two. Go up to the body tag, so we can see it in Chrome a little bit better, and I can resize it, but you can see it's not responsive. I'll delete these column sizes. Then I'll hold down my Option key and slide up, so all three classes are chosen, type in a hyphen, and type in sm, and what this is going to do is once we get the column down to phone width it's going to stack the columns automatically for us. Open up the browser. Return to Brackets. Replace the word Auto with First in the first one, and I'll put in that lowercase i. We'll add Second to the second one, and Third to the third one, and I'll hold down my Option key and slide up. We'll add a space, and this time we'll put in order hyphen, and in the first one I'll put three, and notice that I jump to the third column. In the third one I'll put two, and notice that one jumped to the second column, and in the middle one I'll put one, and now that's in the first column. So you can reorder your columns using Flexbox in CSS. I'm going to hold down my Option key, slide up, and we'll delete all this, except for the word column, col. I'll make space after the first one, and this one I'll put in a bg-warning, which is an amber color. I'll scroll up to the style tags and we mark out the border using Command slash. Go back down to our divs, copy the row, and I'm going to make nested columns here, so I'm going to paste that in between the first and second divs. Then I'll close off that section, hold down my Option key, slide up in front of the two divs and tab them over, copy the closing div tag from the first div, and paste it after the others, so that the section is now nested within the first div. Hold down my Option key, slide up after the l's, put in a space, and we'll type in bg-info, change the third one to success, so it's green. Take a look at it inside of Chrome, and now you can see we have two columns nested within the first column. Go back to brackets and delete all that. Delete the word First, and over in sizes. txt I have the breakpoints written out in a paragraph tag, so I'm going to copy that to my clipboard, paste it into the div, and what I'll do now is say column hyphen, sm for small, hyphen six, so that this column would be six wide when it's at the small size. Then I'll type in column hyphen, md for medium, hyphen 10, so this will be 10 columns at the medium size, which is 768px. Then I'll type in column hyphen lg hyphen four, so this div is now four columns at the large size, and then finally, column hyphen xl hyphen eight, so this is eight columns at the extra-large size. Go back over to Chrome, and I can show you the thing is changing sizes when we go to different breakpoints. I'm going to change these around just a little bit just to show you. So I'll change medium to 7, large to 8, extra-large to 10. Go back to Chrome, and you can see the changes are made. I'm going to return to Brackets. I'm going to copy that inner div, and delete it by typing another div, and this time I'll give it a class of column hyphen six, close it off, put a one in between there. Put my cursor at the end and duplicate it one more time, and I'll put in two in the second one, and then after that I'm going to put in bg-secondary, so it's gray, and after the first one I'll put in bg-info, so it's blue. Copy the whole thing to my clipboard and paste it underneath. Put my cursor at the end of the second one and duplicate it. Change the two to three, and change this six to four, the second one to four, and the first one to four. So now we have a three column layout and a two column layout, and I'll just change the second secondary to success, so you can see it. I'll copy this section one more time and paste it underneath. I will duplicate the last one, and we'll put four in between there, and I'll change this color to danger, so it's red. If you go over 12 it will just put that div on the next line, so it's not going to break anything. You'll just have multi-rows, and we'll change this to three, three, three, and three. And now in Chrome we have multi-column layouts. We have 2 columns, you have 3 columns, or 4 columns, and that's the beauty of 12. As long as it adds up to 12 it's fine, and that is a look at the grid system. In the next clip we're going to look at alignment and offsets, and I'll see you there.

Alignment and Offsets
In this clip we'll take a look at alignments and offsets, so I'm going to start off in my working file, and we'll type in a section tag, and I'll give it a class of row, close it off, and open it up. In between there I'll give it a div tag, and we'll give that one a class of col for column, and bg-secondary, so we can see it. Close off that div. Inside that one I'll say Column 1. Put my cursor at the end, duplicate it once more, change one to two, and secondary to info, so we can see the two columns now in Chrome. Duplicate the second one, change that number to three, and this time let's give it a color of success, so it's green. So now I have a three column layout in my row. I have an extra s in the word style, so I'm going to delete that, so we can see it a little better. After that I'm going to add a style attribute to the first section tag, and we'll set the height of this equal to 200px. So now we can see it a little bit better inside of Chrome. In the section class I'll type in bg-warning, and then I'll say align-items-center, and what you can see right now is the parent container with the amber color in it, and these three columns center themselves inside of that parent container. Get rid of the word center, and put in the word end, and now you can see these three columns jump down, and are at the bottom of the parent container. Get rid of the word end, and we'll do start, which is not the default. Notice that they don't stretch to the height of the parent container anymore, they're just stationed at the top. Get rid of start, get rid of items, and get rid of align. I'm going to jump down to the column number one div, put in a space, and this time we'll say align-self-start, and you can see that it no longer stretches to the size of the parent container. It shrinks down, and it's one column wide. It starts at the top. Go down to the second column div and type in align-self-center and now this div is positioned right in the middle, and finally, we'll go to the column three, and type in align-self-end, and this column now is at the bottom of the parent div. I'm going to delete the third one. In the second one I'm going to delete align-self-center. First column we'll delete align-self-start. I'm going to put my cursor at the end of the l in column one. Type in hyphen four, put my cursor at the end of the l in column two, and type in hyphen four, so now we have two columns, but you can see that because we made them both four we have a space, which is empty, and is the amber warning color. I'm going to say justify-content-start. You didn't really see a change here because the two columns are at the start, but if I change the word start to center now you can see the two columns center themselves within the parent container, and we'll get rid of the word center, and this time I'll put in the word end, and now you can see that the two columns go to the end of the parent container. I'll delete that, and we'll say around, and now the two columns space themselves evenly inside the parent container, and finally, we have between, so that the extra space is in between the two columns, and these are all part of Flexible Box the CSS module. Get rid of bg-warning and get rid of bg-warning in the section, and now you can see we have two columns against the white space. I'm going to delete justify-content-between, close off that extra space, and then in the second column I'm going to say offset-4, and what that's going to do is move column 2 four columns over. So remember, everything's got to add up to 12, so if the first column was 4 wide, and the second one's 4 wide we have 4 to push it over. I'm going to delete the word offset, go down to the second one, and third one, and change them both to three. So I'm going to type in offset hyphen, md for medium, hyphen three, so when it reaches the medium size it'll offset this column, and also do it four. Go back to the first one and say, offset hyphen, medium, hyphen one so it's going to offset it one column at the medium breakpoint. And let's offset two columns. Delete that, delete it in column number two. Go back to the first column, and now we'll say margin left is auto, so it's going to push everything over to the far right, except the m for margin, and it'll take margin and right equals auto, and now you can see in the first one it's pushing the second column all the way over to the right of the parent container. Get rid of that, and that is a look at alignments and offsets, and really to understand the margins you have to play with them a little bit more, and see what they do with this working file. So that ends this clip on alignment and offsets. In the next clip we'll look at padding display and margins, and I'll see you there.

Padding, Display, and Margins
In this clip we're going to take a look at padding display and margins, and in our working file I already have a lot of the stuff set up for us. So you don't have to watch me type it all in again. In the middle div, which is the primary blue one, you can see it in the center. I'm going to add a margin top with a setting of one. The way margins work inside of Bootstrap 4 is we have different sizes, and the size setting, whether it's padding or borders, is based on the Sass Map Variable spacer, which you can set. Its default size is the size of the font. So we have a setting of 0, which is 0, we have a setting of 1, which is 25% of the spacer size, we have a setting of 0. 5, which is 2, and that is 50% of the spacer size, 3 is the same size as the spacer size, 4 is 1 and 1/2 times the spacer size, and 5 is 3 times the spacer size. Then inside of Bootstrap we have different settings we can use. So we have t for top, b for bottom, l for left, r for right, x for left and right because it goes on the x-axis, and y for top and bottom because that's the vertical axis. Finally, if we just leave it blank, like if I type in m-5, it's going to go all the way around. So if we return to Brackets now I can demonstrate some of this stuff. I'm going to type in mt hyphen with a setting of two, and three, and then four, and then five. Then you can see it progressively gets bigger based on the chart I just showed you. I'll get rid of the top, and now we'll do the bottom, five, four, three, two, one. Then I'll just an m-5 in there, and you can see that now that space is equally distributed all around the object. Get rid of the five, make it a four, a three, a two, and a one. Now we'll go over to padding, and you can see the padding at setting five goes all the way around the primary blue object. Try four, three, two, and one, and then we'll type in 0, and now you can see the text inside that primary blue div is right up against the edges of everything else. Delete the padding. We'll scroll down to the span tags I have underneath it, and of course, span tags are inline elements, so let me move Chrome up, so we can see this a little bit better and go back to brackets. Scroll around. So what I want to do now is change the display of these things. So I'm going to type a d in for display, hyphen block, and you can see the upper span tag, which was an inline element, now expands to the width of its parent container, so it's definitely a block level element at this point. I'll delete that. Let's go down to the divs underneath it, which are by nature block level elements, so they naturally, by default, span the width of their parent container, and in this case I'm going to put my cursor before the b in backgrounds and slide upward, so both of them are selected. I'll type in d hyphen for display, and then we'll type in inline, and now you can see the div elements turn into inline level elements, and that is a look at padding display and margins in Bootstrap 4. In the next clip we're going to take a look at Flexible Box, and I'll see you there.

Flexible Box
In this clip we're going to take a look at Flexible Box. I want to open up Chrome, and I'm going to adjust the interfaces, and then in our working div I'm going to change this to an aside tag, cut it and paste it underneath it because I'm going to use div as a CSS element. Then I'll put in a section tag and open that up, and inside there I'll put a div, and we'll give this a class of p-4, padding with a setting of 4 all the way around it. Close off that div, and inside that we'll put My Flex Thing. Inside that we'll put My Flex Thing. Going to go up to the opening section tag and add a class, and this time we'll add display hyphen flex, and in order to display anything as a Flexible Box CSS module item you have to display it as a flex item. Then we'll set in flex-row. I'll put my cursor at the end of the first div, and I'll duplicate it two more times. Scroll up to where the title tags are and put in style tags. Open those up and inside there I'll say div, curly braces open those up, and we'll give it a border of 1px solid green. Then we'll put in a section rule. Curly braces open those up, and this we'll set at background with a hashtag of f1f1f1, so it's a light gray. Then we'll set in a height of 200px. I'm using CSS rules instead of the Bootstrap rules, just so we don't get too cluttered in our classes. So right now inside of Chrome you can see My Flex Thing in order. After the word row I'm going to type in -reverse, and you can see they jump over to the end. Now this isn't efficient because they reverse order too, so I'm going to put One in the first one, Two in the second one, and Three in the third one, and now you can see that in Chrome they are in reverse order. Get rid of the word reverse. Put in justify-content-start. They're over to the left. That's pretty much the default. Get rid of the start, and put in center, and now the three columns are in the center, and of course, we can put in the word end, and they're at the end. Now I will put in the word around, and the extra space is divided evenly around the three columns, and we also have between. So the first one's at the far left, the third one's at the far right, and number two is centered. Get rid of those rules. Put in the word column, and now you can see we have horizontal layouts. Column-reverse reverses the order and sets everything at the end. Get rid of column and we'll type in row again, and this time we'll put an align-items-start. So you can see they no longer stretch to the height of their parent containers, then instead for the space around their content with the padding setting of four, and they're at the start of the parent container. Get rid of the word start, and we say center, and now they're centered there in the parent container, and finally, we also have end, and they go to the bottom of their parent container. We can also do baseline, and this has to do with the typography, so one of the things we're going to learn about in the next module is typography, but for right now I'm just going to type in an h2, which sets whatever's inside this the size of an h2 in Bootstrap, and in the third one I'll type in h4, and these things align by the baseline of the typography and not the div shapes that they are nested in. Get rid of the h tags. Go back up to the top, and this time we'll type in the word stretch, which is the default, and you can see the items are now stretched. Get rid of this whole rule. I'm going to add two more divs underneath it. We'll set this one to four and this one to five. Hold down my Option key and slide upwards before the p in padding. On second thought, I'm going to put it at the end, so I'll use my arrow keys and slide over, and we'll put an align-self-start. We'll change the start to center in the second one, start to end in the third one, and then we have baseline in the fourth one, and I'm going to add an h3 tag to that so you can see it's going to line up with the baseline, and finally in the fifth one we'll add stretch. So those are the different settings you have for the Flexible Box flex row. I'm going to hold down my Option key and slide up all in front of the word self, except I need it at the end, so I'll use my arrow key again, and this time I'll put in the medium size, and this size will only be enacted for medium and larger screens. The smaller ones it'll no longer work. So I'll go down to Chrome, and I'll show you once we get passed that notice the differentiation in the h3 tag. Everything reverts back to normal. Go above the medium size breakpoint and everything goes the way it's described up above. So that is how you can control objects with FlexBox at multiple breakpoints.

Summary
In this module we learned about graphic design and responsive layout. We started by talking about the four principles of graphic design. Next, we discovered Bootstrap background colors. We learned about containers and rows for building responsive layouts. We added media breakpoints. We talked about the grid system for multi-column layouts. Then we learned how to align and offset those columns. We added padding and margins and talked about display options. Finally, we saw how Bootstrap 4 implements a CSS Flexible Box module. In the next module we take a look at navigation.

Bootstrap Navigation
Introduction
In this module we'll learn about Bootstrap 4 navbars, breadcrumbs, and pagination. We'll start by adding a pre-coded navbar. Next, we'll learn how to hand-code the navbar to learn how it's done. We'll learn about adding a-r-i-a tags and data-definitions. We'll add a dropdown menu to our navbar. We'll talk about other forms of navigation in Bootstrap 4, pill buttons, tabs, and links. Then we'll go back to our navbar and change the text color and background colors. We'll learn to add a search box form to our navbar and keep it responsive. We'll keep track of our website areas with breadcrumbs. We'll add pagination to the page. Finally, we'll add an animated scroll effect to our navbar. So let's get started.

Adding the Precoded Navbar
In this video we're going to start coding our web page using the Bootstrap pre-coded navbar. So here I have opened the Pre-coded Navbar start file, which is included with the working files for this module, and I'm going to scroll down, and before anything else I want to drop in a picture, so I'm going to type in the header tags, open those up. Then I'll add a div with a class of container. Close that off and open it up. Then we'll add a div with a class of intro-text. Close that off. Inside the opening header tag I'm going to add a class, and we'll set the class to masthead, and then I'll go up right underneath the title tag, and I'll put in a return, and I'll add some style tags, and I'll open those up. Inside there I'll set the header. masthead selector, add curly braces, open those up. Then we'll set the text-align to center, the color to white, the background-image to url, and inside quotation marks we'll go down to the image folder and we'll get the header background JPG. Then we'll do the background-repeat, and we'll set that to no-repeat. Then we'll set the background attachment to scroll. Then we'll set the background position to center and center. We'll set the background-size to cover. Then we'll set the width to 100 video screen width, or vw, and then we'll set the height to 100, and I don't need a space between the v and the 0, so I'll get rid of that. Let's go over to the Bootstrap website, and we'll go to the documentation tag, and I'll scroll down to components, and from components I will choose Navbar. Then we'll scroll down the documentation here until we find the one we want, and here it is. It's the navbar with the toggle classes. So I'll scroll down, and we'll copy this to our clipboard, and go back to brackets. Scroll down to just before the header tag, and I'm going to paste, and you can see right here in Chrome right now that we already have our navbar in place, so I'm going to resize Chrome to show you where the toggle button is, and you click on it, it goes down, and I'll click on it again, it goes up, and then I'll expand Chrome out to the original width. So even though this is very easy to do just cutting and pasting from the documentation page, this is not the style of bar that we want, so I'll pull over the one we do want, and here it is where it's transparent, and you can see the white rabbit, and when I scroll down the navbar becomes opaque, and I'll scroll up again, and it becomes transparent. So that's what we're going to build in the next video using hand coding, and I'll see you there.

Hand Coding the Navbar
In order to hand code this I have deleted everything that we put in in the last video. So we're starting out with just the stuff in the header tags and the header class. So I'm going to start off the navigation with nav tags and open those up, and then I'm going to add a div with a class of container, which is normal for Bootstrap. Open that up, and then we'll add an anchor tag with an href of just a hashtag for right now, and then we'll add the word top. Close off the anchor tag. We'll put the word Navbar between the tags, and right in the body tag I'm going to add the id of top, so that this nav will link itself to the top of the page. Then we'll go right underneath the anchor tag, and we'll add some button tags. I'll put in the word menu, and then I'll add some italic tags or i tags. Inside the first one I'll give it a class of fa for font awesome, and then fa-bars, and this will draw the three horizontal bars that some people refer to as the hamburger menu. I'll put a return after the closing button tag, and we'll add a new div, and we'll just close that one off and open it up, and inside that I'll give it a ul tag for unordered list. I'll close that off and open it up, and then we'll start adding the links with li tags, so I'll type li, and then inside there we'll put Link 1, except I want delete that and put an anchor tag first, and inside we'll give it an href of hashtag link1. Then in between the anchor tags I'll add Link1, and I'll put my cursor at the end of the line, and I'll duplicate it four more times, and we'll go through and change the names to Link2, Link3, Link4, 5, and then in the hrefs let's go backwards, and we'll 5, 4, 3, 2, and 1. So now our links will all go to the respective id tags, and of course, if you wanted them to go to other pages you would just put in the URL for that page. Now in Brackets I can grab multiple lines by holding down my Option key and sliding upward, and in this case I did it after the letter i. I'll type a space, and then we'll put in the class attribute, and inside of the class we'll list this as nav-item. Then I'll use my right arrow key and move the cursor over to the right of the letter a, and I'll type in a space and another class, and we'll name this one nav-link. We'll put in a space, and this time we'll add js-scroll-trigger, and this is some Bootstrap JavaScript called that will animate the scrolling for us when we click on the links. Now I'll move my cursor over to the opening ul tag, and we'll add a class, and we'll set this class equal to navbar-nav. Then we'll put a space, we'll set the text to text-uppercase, so all the letters are capitalized. Then we'll set the margin left to auto Then we'll give it an id of navbarResponsive, and we'll use the id in our JavaScript. In the div above the ul we'll add a class of collapse, and then we'll add another class of navbar-collapse. These are both Bootstrap classes, which'll obviously close the navbar, and I just noticed I should have put the id in the div, not in the ul, so I'll cut it and paste it in the proper position. Now I'll add my cursor after the opening nav tag, and we'll add some classes, and the first one we add is navbar, and then navbar hyphen expanded large, so the navbar will expand when the screen is set to a large width. Then we'll add navbar-dark, so the navbar works against a dark background, and then we'll set it fixed to the top, and we'll give the whole thing an id of mainNav. I'll place my cursor after the a in the anchor tag and before the href, and we'll add some classes to that. So the first class we'll add is navbar-brand, and this can be the logo of our web page. There we'll add js-scroll-trigger, and this is the button that will open and close the menu when the screen is smaller. Now we'll add some things after the button opening tag. So the first thing we'll add is the classes, navbar-toggler, and this will trigger the JavaScript that will open and close the menu when the screen is smaller. Then we'll set navbar-toggler-right, and that will set the button on the right side of the screen. Close off the classes, and we'll add the type attribute of button. Now I'm going to add some attributes that we will explain in more detail in the next video. So the first one is data-toggler-collapse, and I'll add a space, and then we'll add data-target, and we'll set that equal to a pair of quotation marks for right now. I'm going to grab the id name, copy it to my clipboard, and paste it in between the two quotation marks after a hashtag. Remembering that this uses jQuery, so when we're calling something out, like a target, we need to put the hashtag in there for jQuery. After that I am going to put a space in the attribute of aria-controls equal to quotation marks. Then aria-expanded equals, and we'll set this to false, and then finally, we'll set aria-label equal to, and I'll put in Toggle Navigation. Then I'll copy the navbarResponsive to my clipboard, and I'll paste it in between the aria-controls attribute quotation marks, and I just noticed I put toggler instead of toggle, so I'm going to delete that r, and then I'll reduce the Chrome Windows, and I'll click on the menu button, and you can see the links drop down, and I can toggle the links up and down simply by clicking on this button. So I'll expand the Chrome window out once more. In the next video we'll explain some of the stuff that we just typed in and what it means, and what it does, so I'll see you there.

Navbar A.R.I.A. and data- Definitions
In the last video we hand coded our navbar in Bootstrap, and in this video I want to show you what the data hyphen attributes are, as well as the a-r-i-a attributes. So according to the Mozilla Developer Network Web Docs the Data hyphen whatever attribute allows us to store extra information inside of HTML elements. That way we can add things in a standard way without relying on hacks. So in our navbar data-toggle collapse triggers the JavaScript that allows our extra elements to collapse at a smaller screen size. Data-target allows us to designate a div without id, so that is the area that will be collapsed. So the data hyphen elements just allow us to target JavaScript, so we can have an animated menu opening and closing at the smaller screen size. A-R-I-A is an acronym, which means Accessible Rich Internet Applications. It's a set of HTML attributes that allows people with disabilities to access our website. This is the full acronym according to the W3C, Web Accessibility Initiative - Accessible Rich Internet Applications. So in our navbar we have a-r-i-a hyphen controls. A-r-i-a hyphen controls is used to describe the relationship between our navbar button and the expandable region revealed by that button to the screen. This attribute tells us what part of the page we have control over. Next, we added the a-r-i-a hyphen expanded equals false, and setting this to false tells users with screening meters whether the collapsible menu is expanded or unexpanded when the page loads. Finally, we added the a-r-i-a hyphen label, and all this does is name the current element. So there's an explanation of all these extra attributes that are included with the Bootstrap navbar. In the next video we'll learn how to add a dropdown menu to our navbar. See you there.

Navbar with a Dropdown
In this clip we're going to take a look at making a dropdown menu in our navbar. Starting off in our working file, I'm going to first make room for our dropdown menu inside of our ul class navbar. I'll start by typing an li, and I'll give it a class of navbar-item, and then we'll add another class of dropdown, and in between the li tags I'll open those up, and we'll stick in an anchor tag that says Dropdown on it. Underneath that we'll create a div with a class of dropdown-menu. Inside this div are the items that are going to appear in the dropdown menu, and the anchor tag is the button that's going to trigger them dropping down. Close up this extra space right here. So everything happens in this in an li tag that is just added to the other li tags. In between the div tags we'll add anchor tags, and I'll put Sub-Link 1 in there, and then I'll duplicate it two more times, and we'll change the second one to two, and the third one to three, and then I'll hold down my Option key and slide up after the a, and we'll make room, and we'll set this class equal to dropdown-item, and then we'll give them all an href of hashtag. I'll make room in between two and three, and we'll put in a divider in there just to show you how it's done. So we set in a new class, give it a class of dropdown-divider, close it off, and that's all we need to do for the divider. Now I'll go back to the opening div. I'll add an a-r-i-a hyphen labelledby attribute, and inside the quotation marks I'll just put the word navDropdown. Now I'll go work on the button itself. We'll add the class of nav-link to the dropdown, and then we'll also add the class dropdown-toggle. Add an href of hashtag, an id, and I'll leave it empty for now, we'll add a role button, and we'll add data-toggle equals dropdown. After that we'll set an a-r-i-a hyphen haspopup, and we'll set that to true, and then after that we'll set an a-r-i-a hyphen expanded equal to false. Now I'll copy the labelledby to my clipboard, and I'll paste it in the id quotation mark. So we'll go to Chrome and test the dropdown. It works. Then I'll pull Chrome up, resize it, hit the button again, and the dropdown appears, and the sub-links up here. So everything's working. In the next clip we'll look at navigation. See you there.

Other Navigation
In this clip we're going to experiment with navigation using pill buttons. In my working file I have a list of character names. I'm going to add a ul tag in front of the first one, cut the closing tag, and paste it after the last one. Holding down my Command key, I will select each character on each line. Then I'll use Emmet Shift+Command+A and we'll add an anchor tag around each character name. In the href I'll add a pound sign. Then I'll hold down my Command key again, and this time select each anchor tag. Hit Shift+Command+A again, and this time we'll add an li tag that wraps around each one of these. Now I'll hold down my Command key and click right after the hashtag href closing quotation mark, and we'll add a class, and we'll set the class equal to nav-link. Then I'll hold my Command key down again, and click in each opening li tag. We'll add a class to those, and this will be nav-item. In the very first line item's anchor tag I'm going to add another class and call it active. Then in the ul opening tag I'll add a class, and we'll set this one to nav, nav-pills, and I misspelled active, so I'll get rid of the additional e, and now you can see in Chrome that we have a blue pill, and as I click through you can kind of see with blue dotted lines the outlines of each button. I'll scroll back up to the ul opening tag classes, and this time we'll add justify-content-center, and in Chrome you can see that the buttons are now centered underneath the large photograph. I'll delete the word center, and we will replace it with the word end, and now all the pill buttons jump over to the right side of the screen. I'm just going to delete this whole thing, and now we'll add another class, and this time it'll be flex-column, and you can see in Chrome now that the buttons are all vertical, and they all stretch to the width of their parent container. I'll delete flex-column, and we'll replace it with nav-fill, and this evenly spaces the pill buttons across the entire parent container. I'll add a new line underneath the first one, and we'll add a new li tag because I'm going to show you how to make a dropdown menu. In the opening tag I'll add a class of nav-item, and then we'll also add the class of dropdown. I'm going to pull over navigation. txt because you've already seen me type all this in before, and you don't need to see me type it in again. I'm going to copy this information to my clipboard, and I'm going to paste it in the open li tag, and now in Chrome you can see we have a button with the label of Hearts Dropdown, and a little dropdown icon next to it. When I click on it it exposes the submenu. Now you can do the exact same thing, but instead of using nav-pills you would use nav-tabs, and if you don't want either tabs or pills you would just use nav-link. So that is a look at how to create other navigation types inside of Bootstrap 4. In the next clip we'll talk about navbar colors, and I'll see you there.

Navbar Colors
In this clip we'll talk about making the navbar different colors using the Bootstrap 4 Colors. We're still in the same place where we left off in the working file. I'm going to go over to the opening navbar classes, add a space, and this time we'll add bg-dark, and you can see in Chrome that the navbar is now a dark gray. I'll delete the word dark and I'll replace it with the word primary, and now it's a blue. Success turns it to green, and info turns it to a cyan, and I want to demonstrate on this one that if we take the navbar-dark and change it to light it means that the text is against a light background, so therefore, make the text dark. Delete that and restore it to dark, and delete the bg-info, and navbar-dark means the text is against a dark background and becomes light. In the next video we're going to take a look at adding a search box to our navbar, so I'll see you there.

Navbar with a Search Box
In this clip we're going to demonstrate how to create a search box inside of our navbar. In my working file I'm going to add some room at the very bottom after the last li tag, but before the closing ul tag, and I'm going to create a form by using form tags. Then inside the form I'm going to put in input with a type of text, and a placeholder that says Search. Close that off. Go down to the line underneath it, and now we'll put in a button, and the button will say search. Go back using my left arrow to the opening button tag, and add a class, and set it to btn btn-outline-success, and when we get to the button chapter I'll explain that more. Add a space, and then add a margin vertical with a setting of two, and then we'll change out the small size by using margin vertical hyphen sm for small hyphen 0. Go back over to the opening input tag, and we'll add a class, and in the class I'll put form-control. Then we'll set the margin right at the small size to a setting of two. In the form tag allot a class, and we'll call this form-inline, so everything's in line, and then we'll set a margin vertical of a setting of 2, and a margin vertical at the large size of 0, and now you can see when I go down to the smaller size and click, I'm going to open up Chrome a little bit more so you can see it, there's the search box when it's reduced in size. I can open and close it, and then we pull it back open again, and the search box is there when the menu is expanded. In the next video we'll look at breadcrumbs, and I'll see you there.

Breadcrumbs
In this clip we're going to take a look at breadcrumbs in Bootstrap 4. 0. So I have my working file open, and inside the container div I have four items I want to put into a breadcrumb trail. So I'll start off by adding a nav tag with an a-r-i-a label equal to breadcrumb. Close that off. I'll put in an extra line, so we can isolate this from the opening div tag. I'll cut the closing nag tag to my clipboard, and I'll paste it underneath everything. Then I'll put in a space above the word Home, and I'll add an ordered list tag, grab the closing tag, and set them after the chapter seven text. Hold down my Option key and slide upwards. I want to tab everything over. In the opening ol tag I'm going to add a class, and we'll set this to breadcrumb. Then I'm going to hold down my Option key and slide upwards. Holding down my Command key I'll grab the word Home, and then I'll grab Alice in Wonderland, All Chapters, and Chapter 7. Shift+Command+A, and this time I'm going to put in a multiple selector, so I'll type in li, a greater than symbol, then a, so that's going to nest an anchor tag inside of an li tag. Hit enter. In the href I'll add a hashtag. I'll use my left arrow key to go to the opening li tag, and we'll add a class to all these, and I'll set the opening li class to breadcrumb-item, and now you can see in Chrome everything is laid out as a breadcrumb trail. I'm going to add the word active to Chapter 7, and then I'm going to put an a-r-i-a hyphen current tag, and we'll set that to page. I'm going to get rid of the opening anchor tag and the closing anchor tag on Chapter 7 because that is the active page, and we don't need a link to it, and now in Chrome you can see all the breadcrumbs look like they should in Bootstrap 4. In the next video we're going to take a look at pagination, so I'll see you there.

Pagination
In this clip we'll take a look at Bootstrap 4 pagination. I have my working file, and inside the container already in place I'm going to add an h4 tag that just says Chapters in it. Then I'm going to set off our pagination inside of a div, just so it becomes a block level element. So I'm going to start off the navigation with nav tags. Inside that nav tag I'm going to put an a-r-i-a hyphen label, and we'll set that to Chapter Links. Close off the nav tag and open it up. Then I'll add an unorder list tag with a class of pagination. Close that off and open it up. Inside there we'll add an li tag, and we'll give this first one a class of page-item, and we'll close that off, then inside of that we'll add an anchor tag, and we'll give that a class of page-link, add an href, and we'll set the href to hashtag. Close off the anchor tag, and in between the tags I'm going to add the word Previous. Go to the end of the line, and duplicate that four more times. I'm going to change the last one to the word Next, the second li tag to one, the third li tag to two, and the fourth li tag to three. So there we have a lineup, and you can see now in Chrome the lineup of our pagination. If I want to use icons instead of the word Previous and Next I can. So I'm going to make some room here in Brackets. What I'm going to do here is separate out the anchor tag, put it on its own line, put the word Previous on its own line, put the closing anchor tag on its own line. Then I'll make room after the opening anchor tag and we'll add a span tag, and then we'll add an a-r-i-a hyphen hidden tag, and we'll set that to true. Close off the span tag, and inside there we'll add ampersand l-a-q-u-o, so we get a left arrow. In the opening anchor tag I'm going to add an a-r-i-a hyphen label and set that to Previous, and I'll just cut it and paste it there. Underneath the first span tag I'll add another one for the screen reader, so tis span class equals sr-only, close that span tag off, and then put the word Previous in between them. Put the closing li tag on its own line, and then I'll close up this space in between here, and copy the entire li tag to my clipboard, and we'll go down to the Next, and I'll paste it there, and I'll change the word Previous to Next between the span tags. In the a-r-i-a hyphen label we'll change that to Next. Then I'll just go over in the special character and change the l to an r, so the special character points to the right, and now you can see down in Chrome we have arrows instead of words. If you want to disable something you'll go up to the li class, the first one, and I'm just going to type in the word disabled, and now that one is disabled, and I can roll over it in Chrome, and there's no finger indicator of a link. Go back into Brackets. I want to make the first one active, so I'm just going to add the active class, and now the first one is white text reverse out of a blue field. Go up to the pagination ul opening tag, and this time we're going to say pagination hyphen large, and you can see that now in Chrome the buttons are very large. So we have large, we also have small, and I can type that in with sm. I'm going to get rid of the pagination sizes, and we'll put in justify-content-center. You'll be able to see that everything is now centered on the screen. Then I'll delete the word center and add the word end, and now the pagination moves to the right side of the screen. So that's a look at pagination. In the next video we're going to take a look at animating with scroll in Bootstrap 4.

Animated Scroll
In this clip we're going to take a look at Scrollspy in action. Now we're going to cover Scrollspy in module nine when we talk about JavaScript, but earlier in this module I talked about this specific navbar function, which has nothing to do with native Bootstrap classes, but everything to do with custom CSS and jQuery. Here's the JavaScript we're going to attach. Let's go back to the HTML file now, and we're going to attach that script I just showed you to our HTML. So I'll type in script tags. We'll set the source equal to js/, and then the navbar-shrinker. js, which is the file I just showed you. Now we'll go right up underneath the closing header tag, and we have to have some stuff that we can scroll in order to see this in action, so I'm just going to add a div, and we'll give it a class of heightAdder, which is my own class, and then I will copy this name to my clipboard, go up to our style tag. After the opening style tag I'll put in some space, type a dot, and then paste that heightAdder, add curly braces, and in between them I'll add height 1000px, and now if we go down to Chrome we can see that we have something we can scroll. In the header. masthead rule I'm going to delete the width and the height settings, and we'll add padding-top, we'll set that to 300px, padding-bottom, and we'll set that to 200px. Then I'll make some room underneath that rule closing curly brace, and we'll type in an @media tag, and we'll set the minimum width to 992px. Add curly braces, open them up, and then we'll set a hashtag, and we'll go for the id of mainNav, curly braces, open those up, and I'm just going to add all of the rules right now, so I'll copy the id, mainNav, to my clipboard, I'll paste it right underneath, and I'll add the class. navbar-brand. Curly braces open those up. I'll copy this whole rule, paste it underneath, and we'll add another class to this one, change the word brand to the word nav, and then I'll add a class of nav-item, and then another class, nav-link. Copy the second rule to my clipboard, and I'll paste it underneath the third rule, and we'll change the word brand to shrink. Copy this whole thing one more time, and paste it underneath, and then we'll add the navbar-brand class to the last one. So there we have all the empty shells for all the rules we need to make this work. Now I'll start adding our declarations. We'll start off in the mainNav rule, and we'll add a padding top of 25px. Then we'll add a padding bottom of 25px. We'll add a transition of the padding-top, and we'll set it to 0. 3 seconds. Put a comma in and padding-bottom. We'll set that to 0. 3 seconds as well. Then we'll add a border of none, and a background color of transparent. Alright, I'll tab this over and tab that over. Everything's lined up. We'll go down to the next rule, and I'll add a font size of 1. 75em, and we'll set the transition to all, and we'll set that to 0. 3 seconds. Go down to the next rule, and this one we'll start off with a padding of 1. 1em for the top and bottom, and 1em for the left and right, and I'll set that to important. Now down to the next rule, and we'll add padding-top there of 0, padding-bottom there of 0, and the background color will be black, and finally, the last one we'll add the font size at 1. 25em, and the padding of 12px on the top and bottom, and 0 to the left and right. So what's going to happen when we use Scrollspy is once we reach a certain pixel level in a scroll jQuery will add the class of navbar-shrink, and that will give us a solid background and smaller text. As I scroll up and down in Chrome you can see that happening. Very cool stuff.

Summary
In this module we learned about Bootstrap 4 navbars, breadcrumbs, and pagination. We started by adding a pre-coded navbar. Then we hand coded a navbar to see how it was done. We learned about adding a-r-i-a tags and data hyphen definitions. We added a dropdown menu to our navbar. We talked about other forms of navigation in Bootstrap 4; pill buttons, tabs, and links. We went back to our navbar and changed the text color and the background color. We learned to add a search box form to our navbar and keep it responsive. We kept track of our website areas with breadcrumbs. We used pagination. Finally, we added an animated scroll effect to our navbar. In the next module we learn about typography in Bootstrap 4.

Adding Content with Typography
Introduction
In this module we learn about adding content with typography in Bootstrap 4. We'll start by exploring the headline classes. Next, we'll see all of the available built-in Bootstrap for font colors. We'll learn about paragraphs and block quotes. We will discover the inline tags. We'll talk about list making with list groups, and then we'll build an interactive list group with JavaScript. We'll examine responsive floats. Finally, we'll dig into the fixed page items and justify type, so let's get started.

Headline Tags
Hi. In this video we'll be talking about headlines because you really can't have content without headlines. So over on my text file, which is included with the working files, we have some headlines that I gathered from the internet, and these are actual headlines. So let's go ahead and copy them to our clipboard, and I'll paste them into the file without Bootstrap, so we can get a comparison here, and here they are with the normal default CSS presets, and as I move around my interfaces you can see it's not very exciting, so let's jump over to the file with Bootstrap, and I'll paste them into the container div. Right away you can see that we have the Bootstrap default headlines. They're all sans serif, and they're in a gray tone. I'll move my interface over more, so you can see it better, and then I'll hold down my Option key in Brackets and slide upwards, so I can grab all the headline tags at the same time, and I'll tab them over, so it's nice and neat. Then I'll delete this extra area we have underneath it, so the code looks better. Now I'm going to change the sizes of the headline tags using Bootstrap, but before I do I'm going to go ahead and slide up again, with the Option key held down, so I grab all the headlines, and I'm going to type in an h1 hyphen, and then I'll go back and change this to 2, 3, 4, 5, and 6. Pull my interface over a little bit. Now I'm going to hold down my Option key and slide upwards again inside the greater than bracket, and I'll add the class equal to, and we'll set them all to h1, and you can see every one of them now is the h1 size. I'll change them to h2, and all of them now are the h2 size. So you can resize any headline you want at any size you want simply by using the class. We'll try h6, h4, and you get the idea. I'll select all this stuff and delete it, and then I'm going to delete what's inside the class attribute. Now we'll change everything to lowercase by typing in text-lowercase, and you can see it's all lowercase. I'll delete the lowercase, and we'll substitute uppercase, and now everything's in uppercase, and finally, we can go back and delete uppercase and stick in the word capitalize. Each word of the sentence now is capitalized. I'll go ahead and delete this h1 hyphen, and I'll go ahead and delete the class, and I'll change the h1 to h3. Now I want to show you something they call fancy display heading with faded secondary text. So I'll move the closing h3 tag down a few lines, and then we'll type in the tag small, and in small I'll type in Dog Bites Man. I'll close up that extra line I put in there. This time I'm going to add the class to the opening small tag equal to text-muted, and that is going to change the color to a light gray, and we'll talk more about text color in the next video. So if you look over to the right you can see a leftover from Bootstrap 3, and we have the Man Bites Dog and Dog Bites Man in the smaller and larger font sizes. I'll delete this, and now we're going to go ahead and add a new class to Man Bites Dog h3 opening tag, and I'm going to add display-1, and you can see this is a brand new display size that is available to Bootstrap 4. It's very large. I'm going to change the number threes to number ones in the opening and closing tags, and then I'll put my cursor at the end and duplicate it three more times, and then I'll change the last one to hyphen four, hyphen three, and then hyphen two, and you can see over in Chrome that now we have four different sizes of headline display tags. So that's a look at headlines in Bootstrap 4. In the next video we're going to talk about text colors, and I'll see you there.

Text Colors
In this video we'll be exploring Bootstrap colors for text. Inside the container div that exists already on our working file I'll add another div, and this time I'll give it a class of margin top hyphen setting of five, and then I'll type in padding hyphen setting of three, and I'll close off that div, and I'll duplicate it by putting my cursor at the end of the line, and hitting Command+D, and I'll open up the first one, and then I'll open up the second one. Now I'll pull over my Bootstrap text file, and inside there you can see we already have a lot of content. We have all the colors that we talked about in an earlier video. I also included the RGB settings, and then I included the hexadecimal code for the same color. So if you remember our crayon charts, Bootstrap uses these words instead of color names. Going back to the text file, I'll copy the first set, and I'll set it into the first div. I'll hold down my Option key, slide up, so that we can tab over all this HTML code, so it looks nicer, and then what I'm going to do is grab the second set from the text file again, and this time I'll paste it into the second div we just created. Once more I'll hold down my Option key, slide up the two lines, and tab this text over. Then I'll adjust the first line, so everything lines up. I'll get rid of this extra space before the closing div tag, and then I'll pull over the Chrome interface, so we can see it a little bit better, and we'll go over to the first line at the first div and add a space to line that up. Lining everything up is important because I want to be able to use the cursor across multiple lines, so I'll hold down my Option key and slide upwards, and then I will add a less than, and an h3, and a greater than sign. Then I'll go down to the second div, and I'll hold down my Option key and slide upwards, and there once again, I'll add a less than h3, and I'll close off the h3 opening tag. Great. I'll go to the end of the first line, and then I will type in a closing h3 tag, copy to my clipboard, and I'll just go through the rest of these lines holding down my Command key and clicking after each line. Each line will then have a blinking cursor after it, and I'll do it in the lower div as well, and then I'll paste in all the closing tags are pasted at once. That, of course, messes up our code a little bit. So I'll pull my interface over, so everything's on one line once more. I want to show you in a large square the color, so after the first hyphen I'm going to type in the HTML special character, &#9632;, and you can see now in Chrome there's a big rounded square there. I'll copy that special HTML code to my clipboard, and I'll go through each one of these, and I'll paste it, so we have squares that we can look at the color chips in. Then I'll separate the RGB color from the hexadecimal color by doing the exact same thing. I'll paste it after each RGB parenthesis, and we'll go through each one and add it, including the lower div. Now to get everything back on one line I'll go ahead and extend out my interface, and now we're ready to add the code, so what I want to do is move Brackets down, and then slide Chrome over, so we can see the color changes happening at the exact same time. Now I'll hold down my Option key, and slide up after the 3 in the opening h3 tag, and I'll type in the word class equals to quotation marks, and we'll type in text-primary, and you can see in Chrome everything turned blue. I'll change the second word to secondary, the third word to success, this one to danger, this one to warning, this one to info, this one to dark, and this one to body, and finally we'll set this one to black. Let's move the Brackets interface down and we'll take a look at everything inside of Chrome, and you can see the colors are there. I'm going to rearrange my interfaces a little bit, so we can see both of them, and then I will slide up holding down my Option key and the lower three, and this time I'll set the class equal to text-light, and this sets all the text in the last few lines to a light color. I'll double-click on the second one and change it to white-50. Then I'll choose the word light in the third one, and I'll change that just to white. Now in order to see these what I'm going to do is add a background-dark to the div, and that way in Chrome we can see the light colors against a dark background, and I just noticed I have block instead of black, so I'm going to change the o to an a, and then I also forgot to add the hyphen 50 to that line. So now up in Chrome you can see the actual color of 50% gray. So again, we have the colors broken down into the RGB, and also into hexadecimal code. I'll slide the Chrome interface up, and we'll reposition Brackets and I'll slide down, and this time I'm going to select the class of text-danger to my clipboard, and I'll go after the title tag, and I'll set in style tags, so that we can customize the color. I'll type a period, and then paste text-danger from my clipboard, and then I'll add a set of curly braces and open them up. Then we'll set the color to #ff0000, which is a very saturated red, and we'll go over to Chrome, and you can see there is absolutely no change. I'm going to change these last two numbers to ff as well, so that the color is different. Looking in Chrome you can see there's absolutely no change again. So I'm going to put a space after the last ff, and I'm going to type in exclamation mark and the word important, and once I enter that you can see now in Chrome that the text has changed color. So in order to override these defaults you need to use the keyword important. In the next video we're going to start looking at paragraphs, so I'll see you there.

Paragraphs and Blockquotes
In this video we're going to take a look at block quotes and paragraphs. So here we are in the working file from our last module. I'm going to scroll down, and right underneath the header tag I'm going to add a div with a class of container. Close that off, and open up the div tag. Then I'm going to get my paragraphs-with-html-code. txt file, and I'm going to copy the headline to my clipboard and paste it. I'll add a pair of h1 tags before the headline. I'll copy out the closing tag, and paste it after the headline. I'll move my txt file out of the way. Then inside the h1 opening tag I'm going to add the class of display-4, which we learned about in the last video. I'll set the text to center using the text-center class. Then I'm going to get rid of this hyphen and replace it with a break tag. In front of the subtitle I'll add small tags. I'll cut out the closing small tag and paste it right before the closing h1 tag. Then I'll add a class to the opening small tag, and we'll set it to text-muted. Now we're ready to add our paragraphs. So I'm going to pull over the copy. txt file. I'm going to select all these paragraphs, copy them to my clipboard, and I'll paste them right underneath my headline. Then I'll move the copy. txt file over to the right. In the container div I want to push down the margin, so I'm going to add a margin top with a setting of four. From there we'll go down to the first paragraph, and I'm going to give it a class of lead, and it's just like a lead paragraph in a newspaper. It's set at a larger font size, and the leading is spaced further apart. I'm going to slide down my Brackets here, and tab the paragraphs over. First the second one, then the third one, and then the fourth one. Then I'm going to delete the space after the closing div tag, and I'll scroll in Chrome, and everything looks good. I want to set up the block quote right here, so I'm going to quote the White Rabbit. I'm going to select the quote from this second paragraph, and I'll slide down in Brackets to after the third paragraph, and I'll put in a return, and I'll put in some blockquote tags. I'll open those up, and I'll paste what I just copied from the HTML page. Then I'll delete the quotation marks. In the opening blockquote I'll give it a class of blockquote. Then I'll set the color to text-muted, so the blockquote becomes gray. I'll set the padding around that quote to three. Then I'll try centering the text by typing in text-center. I don't like that, so I'm going to backspace and get rid of center, and we'll set it to text-right. I'll add a horizontal rule tag above the blockquote, and I'll copy it. Then I'll paste it right underneath the closing blockquote tag. Now we want to give the blockquote a footer, so I'm going to put in some footer tags, and I'll give it a class of blockquote-footer. I'll close off the footer tag, and then I'll open up the tag set, and we'll type in between them, The White Rabbit from Alice in Wonderland, and you can see in Chrome that right before the citation is a long hyphen. Now I'll add in the citation tags, and then I'll put Alice in Wonderland in between them, and in the opening citation tag I'll give it a title of Alice in Wonderland, and that wraps up this video. In the next video we'll take a look at inline elements, and we'll also look at lists.

Inline Tags
In this video we're going to talk about inline elements. Over to the left we have a list of characters from the book, and I'll scroll down Chrome, so we can see the list of characters there as well. I'm going to highlight the word Alice, and with Emmet installed in my Brackets I'm going to hit Shift+Command+A, and that's going to open up an Enter Abbreviation line at the bottom, and I'm going to type in the word mark, and I'll hit the enter key, and you can see right now in Chrome that the word Alice has a yellow background to it, so that's what the mark tag does. It adds a yellow background. The yellow background that Bootstrap puts in there is so subtle that I want to call your attention to it here. It's right here. I'll highlight the Queen of Hearts, and next I'll hit Shift+Command+A, and this time I'll set the word to del for delete, and in Chrome this'll put a line through the text like it's been deleted. Next, I'll highlight the Cheshire cat, and this time we'll hit Shift+Command+A, and we'll put in the tag, s, and this is meant to be treated as if it's no longer accurate. I'll next highlight Tweedle Dee, and this time I'll hit Shift+Command+A, and we'll type in the tag, ins, for inserted, and we go back to Chrome, and we can see that the text is now underlined. Next we'll highlight Tweedle Dum and hit Shift+Command+A, and this time we'll put in the u tag for underline, and we go to Chrome and Tweedle Dum is underlined. Next, we'll highlight Mad Hatter and Shift+Command+A, and we'll enter the word small, and this makes the text smaller, as we've seen before in an earlier video, and it's meant to be used like fine print. Now I'll highlight White Rabbit, and hit Shift+Command+A, and this time we'll type in the word strong, and strong makes the text bolded. Then I'll surround a March Hare and Shift+Command+A, and this time we'll type in em for emphasized, and we go back to Chrome, and March Hare is italicized, and I have one too many, so I'm just going to delete the caterpillar, and that's a look at the inline elements in Bootstrap 4. In the next video we'll start talking about lists.

Lists
In this video we'll be looking at Bootstrap lists. So in our working file I already have a list, and we'll scroll down to it in both places, and the first thing I'll do is add a class of list-group to our ul tag, and then I'm going to hold down my Option key and slide upwards all the items I'm going to add a class of. I'm going to move my interface over, list-group=item, and you can see right now that that is a Bootstrap list, and I'll clean up my brackets, and I'll readjust the interface. Then I'll hold down my Option key and slide upwards again, to get all of them, put in a space, and this time we'll type in list-group-item-action, and you can see now in Chrome when I roll over each one of these list items they get a hover color. I'll go back to Brackets, and this time I'll copy the entire list, and I'll paste it right underneath, and I'm going to delete the list-group-item in the first one. Then I'm going to change all the words to the color names. So the first word is primary, the second one is secondary, then we'll go to success, info, warning, danger, light, then I'll duplicate the last line by putting my cursor at the end of it and hitting Command+D. I will get rid of March Hare and replace it with Caterpillar, and then I'll change the word light to dark, and we can go over to Chrome, but first I want to go back to Brackets and add a margin top hyphen five, and then we'll go to Chrome and take a look at the colors. So you can see in Chrome now that the background colors are muted, and the font colors have also changed. So what I did was create a new chart for you to see the different colors, and you can see at the top the original colors that we talked about earlier, and then underneath that the font colors that are specific to this list group, and then finally, the faded background colors. Going back to Brackets, I'm going to duplicate the first group, and paste it underneath, and then I'm going to hold down my Option key and slide upwards, and I'm going to delete everything up to the list-group-item, and I just noticed that the first Tweedle Dee doesn't have an l in it, so let me put that in there. Then I'm going to put a span of 40 in the Alice line, and I'll readjust the interface, and we'll add a class of badge, and then space badge-primary, and you can see in Chrome right now that there is a 40 reversed out of the blue field. So to make that look nicer I'm going to display it as a Flexible Box item. In the original class of the li we'll add a database for display, hyphen flex, so it's a Flexible Box now. We'll justify the content to between, and I'll pull up my interface and slide this down, so you can see it better, and we'll go back to Brackets, and then I'll add align-item-center, which is also a Flexible Box command. Now we can't see the separation between the two, so I'll go back to Brackets, and in the ul class I'll add a margin top with a setting of five. And we'll take a look at everything inside of Chrome. Now in Chrome you can see a light gray border around every single item. So we can get rid of that simply by going back to Brackets, then we'll add a list-group-flush, and we'll go back to Chrome, and now you can see that the right and left orders are missing, and we just have lines around our list. We'll go back to Brackets now and expand the interface, and this time I'll put in an hr with a class of margin top hyphen five. We'll go over to the file 0406-Lists. txt and copy the list, and then I'll paste it right underneath. Hold down my Option key, slide up, and tab everything over, and then I'm going to adjust my interfaces, so we can see everything happening at the same time. So currently this is an unordered list fresh out of the box. What Bootstrap allows you to do is unstyle the list. So I'm just going to add a class of list-unstyled to my ul tag, and if you look in Chrome now all the styles are gone. I'm going to go ahead and copy everything to my clipboard, and paste it right underneath. Then I'll get rid of the word unstyled, and I'll change it to inline. Then we'll put in a space, and add the word class, and we'll set the class equal to list-inline-item, and when I pull over Chrome you can see that everything now is in line, the entire list. Next, let's pull over the description list, and you can see it's nothing more than a normal HTML file. I'll copy the hr with the class of mt-5 to my clipboard, and paste it underneath the other list. Then I'll go back to the description list, and I'll copy the whole thing to my clipboard, and I'll paste it, and we'll take a look at everything inside of Chrome. Then I'll tab everything over, so it looks nice, and now what we're going to do to the dl tag is add a class of row. Then in the very first dt tag we're going to add a class of column hyphen small hyphen three, and then I'll copy that class to my clipboard and paste it into the dd tag, and change the three to a nine, and in Chrome right now you can see we have two columns set up. So I'm going to copy the very first class in my dt tag, and then I'm going to paste it into the dt tag with Dinah, and then again, in the dt tag with Mary Ann, and then another paste into the old crab dt tag, and finally, I'll paste it into the Tea Party Goers. Then I'm going to copy the class column small to my clipboard, and I'll paste that in the Alice's cat dd tag, and then I'll paste it again into the housemaid dd tag, once more in They fell into Alice's dd tag, and then finally into the March Hare dd tag. So if you're looking at Chrome right now we can see that our list is in two columns. Now if we look at our list the old crab with its daughter and several birds is way too long, so I'm going to return back to Brackets, and right after that dt class I'm going to add text-truncate, and you can see an ellipses now in Chrome where the full title used to be. Now I want to show you how to do a nested description list. I'm going to go back to Brackets and open up the dd list with the March Hare in it. Move the closing dd tag down to its own line. Then I'll add a new dl with a class of row and close it off. I forgot the d, so let me add that. I'll copy the closing tag to my clipboard, and I'll paste it right before the closing dd tag. Then I'll copy the Mary Ann dt tag to my clipboard, and I'll paste it right before the March Hare. Then I'll put the definition on its own line, and I'll close off the dt tag. I'll set the size from three to four. Then I'll go ahead and separate Mad Hatter from the other part. I'll copy the dt tag once more, and I'll paste it, and I'll close off the dt right after the Mad Hatter. Then I'll go back up to Mary Ann and copy the dd tag, and I'll paste that into the March Hare definition, and I'll change the nine to an eight, and tab that over. Close off the dd tag there. I'll copy the full thing again, and this time I'll paste it in front of a guest, and I'll close that off after March Hare, and if we go back over to Chrome now you can see that the Tea Party Goers has a nested description list in it, and once more, that's divided up into two columns. In the next video we're going to create a group list with JavaScript behavior, so I'll see you there.

List-groups with JavaScript Behaviors
Okay, in this video we're going to build a JavaScript behavior with a list group, and if we go over to the documentation in Bootstrap I can show you what it is we're going to be building and how it works. So you can see, as I click on each one of these buttons information changes inside of the information part, whatever that's called, and quite truthfully, it'd be easier just to copy this to your clipboard and paste it into Brackets, but we're going to build it by hand, so we get the experience. So I'm going to move the Bootstrap documentation over to the side. So I'm going to go back over to Brackets, and I'll open up and make some room underneath this h1 title, and then I'm going to type in a div with a class equal to row and then a margin top of hyphen setting five, and then I'll close that off and open it up. Then I'm going to add a remark at the end because because we're going to end up with a lot of div tags that just are nested inside each other, and you won't know what they are. So I'll add a remark here that says end row, which is the main row enclosure. I'll open this up, and at the very top I'll add another div with a class equal to column hyphen 4, close off that div, and then I'll set my cursor at the end and duplicate it, and then I'll change the 4 to 8, so the 2 of them equal 12. I'll open up the first one, open up the second one, scroll down, grab my closing remark, and paste it after the first one, and change the end to column hyphen four, and then we'll also paste it again, after the second one and change it to end column hyphen eight, and then I'll delete this extra space in between, and we'll scroll up. In column number four I'm going to type in a new div, and we'll give it a class equal to list-group, and we'll give it a margin bottom of a hyphen setting five, and then we'll give it an id of list-tab, and we'll set the row equal to tablist. I'm going to just close this off, although there's an error, and I have an extra quotation mark after the margin bottom, so I'll delete that. I'll pull out my interface a little bit more, and then I'll go ahead and inside of that we'll type an anchor tag with an href equal to hash. I'll close that off, and inside of that we'll put Chapter 1. Set my cursor to the end, and duplicate it two more times. Change the second one to two, the third one to three, and then I'll hold down my Option key and slide upwards after the hashtag, and we'll type in list hyphen chapter one, change the second one to two, and the third one to three. We have a lot of attributes to add, so I'm going to increase the size of my interface over to the entire screen width. Then I'll hold down my Option key and slide upwards, and we'll type in id equals, and we'll give each of these a list hyphen chapter one hyphen list, and then I'll change the second one to two, and the third one to three. I'll again, use my option key and slide upwards after the closing quotation mark, data-toggle, and we'll set this to a list. Then I'll add my class equals quotation marks. The first thing we'll type is list-group-item, and then we'll add list-group-item-action, and then I'll select just the first one because that's the first one that's going to be active, and I'll add the class of active to it, and we'll go over to Chrome, and you can see there is our list group and our buttons all ready to go. And we're done with the opening column of column four, so now we'll work on column eight, and what I'm going to do is open that up and move my cursor back to the top. This time we'll add a new div, and we'll give it a class of tab-content, and then we'll give it an id of nav-tabContent, and I'll close that off, and I'll cut the closing div tag to my clipboard, and paste it at the very bottom, copy this closing remark, and change the word from column eight to tab-content. We'll go back up to the beginning of the tab-content div, and I'll add a new div with a role of tabpanel, and I'll close that div off, and then I'll go back one space using my left arrow key, and this time we'll give it an id equal to list hyphen chapter one, and then we'll give it a class of tab-pane, and another class of fade. I'll set my cursor to the end of that line, and I'll duplicate it twice. I'll change the second one to two, the third one to three, and then in the very first one we want this one to show first, and we want this one to be the active one. Then I'll open up the first one, open up the second one, and open up the third one, and I'll get rid of the space underneath the last one. Okay, now we'll pull over chapters. txt, and I'm going to copy the first paragraph and the first h3 tag to my clipboard and paste it, and then I'll tab the paragraph over. Go back to chapters. txt, copy the second paragraph in the second headline, paste that into place, scroll down, and then tab that paragraph over, and finally, go back again, to chapters. txt and grab the third one and paste that, and we'll tab that one over. I'll remove this copy. txt file, and then we'll go over to Chrome, and you can see that it works beautifully now.

Responsive Floats
In this video we'll be looking at Responsive Floats. What I have right here is the pre-prepared file, and I'm going to go over to Chrome, and currently it is in the extra small device size, which is less than 576px. Then I'll move the Chrome interface over to the right, and when the background color changes we're now at the small device size, which is 576px. I'll continue to increase the size of the browser window, and then we'll be at the medium device size, which is 768 pixels. Keep going, and I'm at large devices, which is 992px, and then we're finally at the extra-large, which is 1200px and over. So I'll return this back down to the small device size, and we'll go over to brackets. So now I'll scroll down a little bit, and then what we'll do is in the opening paragraph tag we'll add the class, and we'll make it equal to float-left, which is the default, so you're not going to really see any changes on the screen, but whenever you have a float you need to have the clearfix, so I'm just going to go ahead and show you that that's built-in, and we'll just add it to our class pile. In order to see anything change what we're going to do is just type in the word right, and now you'll see that the paragraph has floated over to the right. Nothing new here. What I want to show you in this video is the fact that you can alter the way things are floated based on the size of the screen. So I'm going to delete float-right. So we'll start off by typing in float-xs-right, and we'll go over to Chrome, and we'll test the sizes, and nothing happens because there is no float-xs-right, but if we change the xs to small, and then we pull up the Chrome window, you can see that as soon as I reach the small device or larger the text becomes floated to the right. We'll go back to Brackets, and what I'll do is I'll change the sm to md for medium. Then we'll go to Chrome and pull it out, and now you can see it doesn't float to the right until we reach the medium device size or larger. I'll return Chrome back down to the small size, and this time we'll change medium to lg for large. Pull out Chrome again, and now you can see it doesn't float to the right until I reach the large device size, and of course, we also have the extra-large size, and I'll demo what happens again. So now we'll go back and change the extra-large to small, and this time I'm going to add another class of float-md-left. I'll grab the Chrome interface again, and slide it over, and you can see that at the small size it jumps to the right, and at a larger size it jumps back to the left again. So what this means is we can control the alignment of our type with floats, and control the floats independently based on the screen size. We can either choose to have it float left or have it float right, and change the float on the fly. So a little while ago we talked about Clearfix, and Clearfix is a way for an element to automatically clear any child elements, so that you don't need to add anymore markup to the elements. It clears the flow, and I'm going to demonstrate that now with buttons. I'll go down to the next line and we'll tab it in, and I'll start off with a div tag, open that up, and then I'll add a button tag, and in between those I'll type in Left Float, put my cursor at the end and duplicate it, and I'll change the word Left to the word Right. Hold down my Option key and slide it upwards after the n in button. Put in a space, and we'll add the class of float-left. I'll double click on the second left and change it to right, and over in Chrome you can see now we have a button floating to the left and a button floating to the right. Now I'll add a paragraph tag, and I'll type the word lorem, and hit the Tab key, and Emmet will put in a whole paragraph of lorem ipsum text, and you can see that it's behaving the way a float normally would. The floated buttons are out of the flow of the HTML document, so the text tries to wrap itself around it. Now what I'll do in the opening div tag is add a class of clearfix, and right away in Chrome you can see that the paragraph now is cleared of both floating objects. So Clearfix is built-in to Bootstrap 4. 0. In the next video we're going to talk about fixing things to the top, to the bottom, and we'll also have a sticky item, so I'll see you there.

Fixed Elements and Justified Type
In this clip we're going to learn about how to fix things to the top and bottom of the screen, and make something sticky, so it moves to the top and stays there, and then we'll also learn how to justify text. So as we look at our start file you can see it is chapter 8 of Alice in Wonderland, and all the text is there. So we'll go over to our Brackets file, and I'm going to scroll down and go to the first paragraph, and right after the margin top hyphen four I'm going to put in a space, and we're going to type in the word text-justify, and you can see right now that the first paragraph is justified, however, we want the entire page to be justified, not just the first paragraph, so I'm going to delete that. I'm going to go back up to the existing div tag, and I'm going to type in the word class, and this time I'll type in text-justify, and if we scroll up and down in Chrome you can see that now the whole story is justified on the page. Now we'll scroll up to the top of the page in Chrome, and we can see the big Chapter 8 block there. What I want to do is go over to Brackets and in the h2 after the padding hyphen 4 I want to type in fixed-top, and as we scroll up and down inside of Chrome now you can see that that big Chapter 8 block is fixed to the top of the page. I'm going to change out the word top to bottom, and right away in Chrome you can see that the Chapter 8 block dropped down to the bottom of the page, and now when I scroll in Chrome it is fixed to the bottom of the page. So what I'll do is I'll just delete the fixed top and bottom, and what we want to do now is go down to The Queen's Croquet-Ground title, and you can see it right there in Chrome, and this time after the padding hyphen one I want to type in sticky-top, and now when we scroll in Chrome when that title block gets to the top of the page it's going to remain fixed there. It's going to stick there. So that is how you can fix things to the top and the bottom of the page and justify your text.

Summary
In this module we learned about adding content with typography in Bootstrap 4. We started by exploring the headline classes. Then we saw all the available built-in Bootstrap 4 font colors. We learned about paragraphs and block quotes. We discovered the inline tags. We talked about list making with list groups, and then we built an interactive list group with JavaScript. We examined responsive floats, and finally, we dug into fixed page items and justified type. In the next module we will work with Bootstrap 4 buttons.

Buttons
Introduction
In this module we learn about Bootstrap 4 buttons. We'll start by exploring buttons in Bootstrap colors. Next, we'll see the same color set, but this time without line buttons. We'll learn how you can make buttons from other HTML tags. We'll discover button groups. We'll talk about making button groups with dropdown menus, and then we'll build radio and checkbox buttons. We'll examine button toolbars. Next, we'll look at alerts and dismissible alerts. Finally, we'll dig into the Bootstrap badges. So let's get started.

Buttons with Color
In this clip we'll be looking at buttons with color. Start off in 0505-buttons-with-color. html that's included with the working files. You'll see that we already have an unordered list with the color names, and also characters from Alice in Wonderland. I'm going to use what we learned in the last module and go up to the opening ul tag, and after the l put my cursor there, and then type in class equals list-group, and then a space, and then list-group-flush. Then I'm going to hold down my Option key and slide upwards after the i in each li tag. From there I'll put in a space, and I'll type in class equals list-group-item, and then what I'm going to do is move over my Chrome interface, so we can see all this work together a little bit better. So I'll pull over the Brackets interface to the right. Now I'll go ahead and pull all the li items back over to the far left. Go in front of each one of the names of the buttons and put in a return. I'm going to try to do all these at once now, so I'll hold down my Option key and slide downwards in front of the word success down to dark, and then I'll stick in a return, and now I've got some cleaning up to do. So I'm going to delete that space, I'm going to tab over Success Color, then I'll tab over Info, Warning, Danger, and Light. Then I want to take out that space before the word Dark, so all these things line up. Put in a return after the ul tag, so we can see the items we'll be working on better. Then I'm going to take each li tag, put in a return, and set it down because we're going to surround all these elements with other tags, and I don't want to get too confusing on this little screen. Now I'm going to select just a plain text link, and I'm going to use the shortcut in Emmet of Shift+Command+A, and then I'll type in the word button, and hit the Enter key. I'll grab Primary Color, Shift+Command+A and Enter, do the same thing for Secondary Color. Now I'm going to try to grab all of these by holding down my Command key and just sliding over each one of these button names, and then finally, I'll hit Shift+Command+A, put all the button tags there at once. So over in Chrome now we can see all the buttons. I'm just going to clean up the space I put in there in front of the word Info, and then I'm going to move the Info button tag over, so it lines up with the rest of them. I'll hold down my Command key, and I'll put my cursor at the end of the word button on the first line. Then I'll keep going down after each letter n on all the other buttons and add my cursor to the very bottom, and I'll type in the word class, and we'll set it equal to btn, which is the Bootstrap class for button, so you always need a btn when we're doing buttons in Bootstrap. Then I'm going to put a space, and I'm going to type in btn-primary, and you can see in Chrome they all turn blue. So now what I want to do is just show you what a plain link button is, so I'll change the first one from primary to link. So even though this is a button, it looks just like a plain text link that you would make with an anchor tag. Then I'll go down to the third one, and I'll change that to secondary. I'll go down to the success, and change that to success, down to info, and change that to info, down to warning, change that to warning, down to danger, change that to danger, and we have light, and then we have dark. What I want to do now on the light color is just go ahead in the li tag and add background-dark, so that it stands out better. Then I want to hold down my Command key and go after each letter n, again, on the word button. I'm going to use the attribute type, and set it equal to button, and I'll pull over Chrome, and you can see all the buttons now are available in all the Bootstrap colors. In the next video I'm going to show you how to make outline buttons.

Outlined Buttons with Color
In this clip we'll be making Bootstrap Outlined Buttons. I already have text in the ul list, so we don't have to go over that again. What I'm going to do is hold down my Option key and slide upwards, so the cursor is before every single opening li tag. Then I'll add a less than sign, and I'll add a button tag. I'll set the type equal to button, and then I'll add a class, and set that equal to btn-outline-info. Close off the quotation mark, and then close off the tag. Now I have to go ahead and put the names of the buttons in between the button tags, so I'll go ahead and cut out Primary Color: Alice, and paste it. Then I'll cut out Secondary Color, paste that one. Then I'll cut out Success Color and paste that one. Then I'll do Mad Hatter, cut that and paste it, and do Warning, cut it and paste it. Then I'll do the Queen of Hearts. Cut that one and paste it there. The King of Hearts is next, so I'll cut that one and paste it, and then finally, the Mock Turtle. Cut that one out and paste it. Well right now you can see over in Chrome we have outlying buttons. I'll readjust my interfaces a little bit to make more room, pull the brackets over to the right, and now we'll go through and change all the colors. So I'm going to change the second one to secondary, the third one to success, the fourth one to info, the fifth one to warning, the sixth one to danger, the seventh to light, and the eighth one to dark, and to reverse out the light color what I want to do is go over to the opening li tag and add a class of bg-dark, and then I want to add, well let's try a margin of two. I don't like the margin, so I'm going to change the m to a p for padding, except I forgot to change the first one to primary, so I'm going to go back and change that to primary, and there we have our outline colors. In the next clip we'll be talking about how to create other buttons with HTML and use other classes, so I'll see you there.

Making Buttons with Other Tags
In this clip we'll be creating buttons with other HTML tags, and we'll also be using other classes to get other effects. So in the working file right here I have Read Alice in Wonderland as our working text. I'll put my cursor at the end of the line, and hit Command+D to duplicate it. I'll take the first one and hit Shift+Command+A, and this time I will type in an a tag. Hit Enter as an href will set that to the hashtag, move my cursor over with my arrow key, and then I'll set this as a role of button. Putting my cursor before the word role, I'll type in a class, and we'll set this class to btn for the Bootstrap button, and then I'll put a space and btn-success just for the color of the button. I'll select the next Read Alice in Wonderland on the next line, and I'll hit Shift+Command+A again, and this time I will surround that line with the button tag, so I'll type in button and hit Enter, and inside the opening button tag I'll add a class of btn, and then we'll change the color to btn-info, so it's blue. I'll go outside of that quotation mark, and now I want to add the attribute of type and set it equal to submit. Go to the end of the line. I'll go down a couple of lines, scroll up a little bit, and then I'll set an input tag in place, and we'll set the class of this equal to btn, btn-primary, add a space, and set the type of this equal to button, and then I'll set the value equal to Alice. I'll close off the input tag, and I'm going to put my duplicate key twice. In the second line we'll change the type to submit, and we'll set the color to danger, and I'll set the value equal to submit, and in the third one I'll set the type equal to reset, and I'll change the value to reset, and I'll change the color to warning, except I forgot the e, so I'll put the e there. We have a whole line of different types of buttons that you can create in HTML. Let's scroll down, and I'm going to add an hr, and I'm going to give it a class equal to margin hyphen of a setting of five, and close that off, so that things separate. Then I'm going to go up and copy the second button to my clipboard and paste it, and I'm going to duplicate it two more times. Scroll down a little bit, and this time on the first one I'm going to add the class of btn hyphen large, and then in the third one I'm going to add the class of btn-sm for small, and I'm going to copy the hr and paste it underneath. Going to Chrome we can scroll down, and we can see that we have three sized buttons right now, the small, the regular, the large. Going back to Brackets I'm going to scroll down a little bit, and this time I'm going to copy the second button without the extra classes on it and paste it, and I'm going to duplicate it once by putting my cursor at the end and hitting Command+D, and this time I want to change Alice in Wonderland to Through the Looking Glass. Then in the first one I'm going to add an additional class, and it'll be btn-lg for large, and then we'll make it a block level element, so I'll add btn-block. Copy that whole thing to my clipboard. Go to the second button, put a space after info, and paste it again, and now you can see in Chrome that we have two block level elements. I'm going to change the color of the second one to primary, so they're different. Copy the hr tag and paste it underneath, and we'll scroll down in Chrome now, and you can see that we have the two block level elements, and they are responsive. I'll put the interface back, and now we will go underneath that new hr we just typed. I'm going to copy the second button again, paste it. I'm going to delete button large, button block, and right after the submit attribute I'm going to add another attribute to add a hyphen toggle equals button. So what this is is a toggle button now. It's that simple. Go back into Brackets, add some more room. I'm going to copy the very first Alice in Wonderland button from above, paste it below. I'm going to get rid of the button large, button block. I'll put my cursor at the end and duplicate it two more times, copy the hr, and paste it underneath, and I'm going to change the word submit by holding down my Option key and dragging upwards, and I'll delete the word submit, and I'll replace it with the word button. On the second button I'm going to go ahead and add the word active. The third button I'm going to add the class of disabled. So now if we go back to Chrome we can see the first one's normal, the second one is active, and the third one is disabled. So there you have different ways of making buttons. In the next clip what we're going to take a look at are button groups, so I will see you there.

Button Groups
In this video we'll be working on Button Groups, groups of different chapters and text. I'm going to hold down my Option key and slide upward, so there's the cursor before each chapter in the first grouping. Then I'll type in a button tag, and we'll give it a class of empty quotes for right now, and then we'll set the type equal to button. Close off that tag. I'll use my arrow key to move my cursor to the end of each one of these chapters, and then I'll type in a closing button tag. Then I'll use my left arrow key to go back in between the quotation marks in the class, and I'll set this to button, and then button hyphen success to color them green, and you can see in Chrome right now we have three buttons. I'm going to select this whole first grouping, hit Shift+Command+A, and set it into a div using Emmet, and then I'll clean up the spaces here. In the opening div I'm going to add a class, and we'll set it equal to btn-group, and now inside Chrome you can see that we have a grouping of the first three green buttons. The corners are rounded, and the center buttons have straight lines, so they all blend into each other. What I want to do now is put in a horizontal rule, and set it a class of padding hyphen five, so we can separate all the items. Then I'll put some space into my brackets, and I'm going to change the p to an m. I'm going to go to the center button in the first grouping to show you that you can use multiple colors, so I'm going to change success to info, and now you can see that we have a light blue button in between the green buttons. I'm going to copy the whole first grouping of my clipboard, then I'm going to paste it. In the opening div I'm going to put my cursor after the p in group, but add a hyphen, and then I'll type in vertical, and now you can see that we have a vertical grouping, so it's very simple to do a horizontal grouping or a vertical grouping. I'm going to change this back to success, so it's green again, and now we have the grouping of three buttons, which looks really nice. I'll delete this chapter text we don't need, and I'll copy the horizontal rule, and I'll paste it right underneath this next one with Read Alice Chapter one, two, and three. In the next clip we're going to explore how to do Bootstrap button groupings with dropdown menus, and I'll see you there.

Button Groups with Drop Down Menus
In this clip we're going to create button groups with dropdown menus, so in my working files right now I'm going to scroll down and show you the line where our text is. I'm going to select the entire first line of Read Alice in Wonderland, and I'll wrap it in a div tag using Emmet Shift+Command+A, but I'm going to change it from a div to a button. Then I'll add a class inside the opening button tag, button space btn-primary, and that will make the color of the button blue. Then we'll put in the class of dropdown-toggle, and we'll set the type equal to button. After that we'll add some JavaScript ready attributes, data-toggle equals dropdown. Then I'll go in front of the R in Read, and I'll set it all on its own line. So right now in Chrome you can see we have a blue button with a downwards arrow. So the next thing we need to set up is the menu. Back in Brackets I'm going to hold down my Option key and slide up in front of the chapter, add an anchor tag, and give it a class of dropdown-item. Close off that class quote, add an href, and we'll set it to hashtag, and then I'll close off the opening anchor tag, use my arrow keys to go to the far right, and add a closing anchor tag to each one of these, and now you can see in Chrome the chapters are all lined up underneath each other. I'm going to put in a space before the first anchor tag, and then I'll add a div tag with a class of dropdown-menu. Close off the opening div tag. Cut the closing div tag to my clipboard, and paste it after the last anchor tag. I'll tab everything over in Brackets, so it looks nice, and we scroll down in Chrome and you can see that now those chapters are hidden. I'll pull Chrome up a little bit, and when we click on the blue button with the down arrow the three chapters are there. If yours isn't working be sure to refresh you page. JavaScript will only work if the page is refreshed. Now what we're going to do is a button group with a dropdown. Once again, I'll hold down my Option key and slide it up in front of each chapter. I'll add an anchor tag, give them a class of dropdown-item, close off that anchor tag, and we'll add an href with a setting of hashtag. Go to the far right with my arrow keys, and I'll put in the closing anchor tags. Go after the first one. I'm going to duplicate the first one for right now. The very top one, instead of reading chapter one I'll type in Table of Contents. Then I'll make room and add a div tag with a class of dropdown-menu, close the div tags, cut the closing div tag to my clipboard, paste it right after the last a tag, and I'll make room for this. Go up and copy my horizontal rule with the margin, and paste it, so these things stand out in Chrome. I'll scroll down, and in Chrome you can see that the chapters and the table of contents are all missing, they're all hidden right now. I'm going to select Read Alice in Wonderland, hit Shift+Command+A, so I get Emmet. It's already set to button, so I'll just hit Enter. Then I'll do the same thing to About Lewis Carroll. Press Shift+Command+A and add button tags that surround it. I'll hold down my Option key and go after the n in button, add a space, and we'll add a class equal to btn space btn-secondary, so that the color of them are gray. Then after that we'll set in a type equal to button, and before the first button I'm going to create a div and give it a class of btn-group, cut out the closing tag, and paste it underneath everything else. In the second button I'm going to put my cursor just before the greater than symbol, and add a space, and then we'll set this to data-toggle equals dropdown. So this will trigger the JavaScript. Then I'll add a class to that same button that says, dropdown-toggle, and I'll correct my spelling of the btn group in the opening div. I'll put Read Alice in Wonderland on its own line. I'm going to take the closing button tag and put it on its own line, and then I'm going to take Read Alice in Wonderland, and put span tags around it, and you can see now in Chrome if I don't have enough room for the dropdown underneath the button it will go upwards. So the blue one still works, the gray one now works. Back in Brackets I'm going to copy the hr class, and I'm going to paste it at the bottom of the page, and I'll paste it again after the Queen of Hearts. Then I'm going to pull Chrome up, and now the Table of Contents drops down correctly. I want to separate the Table of Contents from the chapters, so what I'm going to do is put in a return, so there's an extra line, and then we'll set in a div, and we'll give it a class of dropdown-divider. Close that div off. Nothing goes inside of it, but if we go back to Chrome and look at our dropdown menu you can see that now there's a line in between Table of Contents and Chapter one, two, and three, so that separates the content, and you can throw as many dividers in there as you'd like. So in our next clip we're going to take a look at radio and checkbox buttons, and I'll see you there.

Radio and Checkbox Buttons
In this clip we're going to create radio buttons and checkbox buttons. Inside of Brackets I'm going to hold down my Option key, and click and drag upwards. Then I'm going to add a label tag, and give it a class of two quotation marks, and I'll close off the label tag, then I'll put in an input tag, and I'll set this to the type of checkbox, close off that type, and then I'll set the attribute of autocomplete to off. I'll close off the input type tag, and then I'll close off the label tag. Then I'm going to take the label, copy to my clipboard, and I'll paste it after Mad Hatter, after White Rabbit, and after Queen of Hearts. I'll tab all the labels over, so they line up. I'll put a return after my favorite characters, and I'll type in a div tag. I'll give it a class of btn-group-toggle, and then we'll add some JavaScript of data-toggle equals, and we'll set it to buttons. Close off that div, cut the closing div tag to my clipboard, and I'll paste it after the last label tag, and then I'll set my cursor in front of all the labels and slide upwards by holding down the Option key, and I'll tab them over. What I'm going to do is set my favorite characters in an h3, so I'll set the h3 tag, cut the closing h3 tag, and paste it after characters, and we'll scroll down inside of Chrome. You can check on them. Then don't check very well currently, but we'll fix that. Alright, inside the label class I'm going to hold down my Option key and slide upwards. I'm going to add btn space btn-info, and that will color them all a light blue, and I'll go back to Chrome and show you that they're working as checkboxes. On the first one I'm going to set the word active, so when the page loads the first one looks darker than the rest of them. Go back to Chrome, scroll down to the buttons, and now you can see the first one is already chosen, and the others are checkable. Alright, go back to Brackets, scroll down to the bottom, and this time we're going to set up radio buttons. So chapters I have finished I'm going to put in an h3 tag, cut the closing tag to my clipboard, and paste it after the headline. I'll put in a space. I'm going to set in a div, cut the closing div tag to my clipboard, and paste it after Chapter four. Hold down my Option key, and slide up in front of each of the chapters. Then I'm going to add a label, and I'll give it a class of btn btn-success, so that the color is green, and then I'll close off the label tag. Now I'll give it an input tag with a type equal to radio. Close off that type. We'll give them all a name of Options, and then I'm going to give them all an id of option1, and even though that's incorrect I'm going to leave it for this demonstration because we're not really building a form here. Then I'm going to add the attribute of autocomplete equals off. Close off the input tag. I'm going to grab the closing label from behind Alice and paste it behind Chapter one, and then Chapter two, Chapter three, and Chapter four, so all of them end. Then you can right away down in Chrome the green buttons are there. Inside of the opening div tag I'm going to add a class of btn-group, and immediately they all come together, and then I'm going to add another class of btn-group-toggle, and then we'll add a data-toggle equals a button, except I messed it up. I should have put it outside of the quotation marks. So I'll just add closing quotation marks, and add a new quotation mark after toggle, and cut off this extra one after button, and everything's fixed. So now if we go down to Chrome we can see that we have radio buttons. In the next clip we're going to take a look at button toolbars, so I'll see you there.

Button Toolbars
In this video we'll be making the Button Toolbar. So here we have our working file with a list of characters in it. I'm going to hold down my Option key and slide upwards. I'll add a less than sign, and then the tag button, and we'll give it a class equal to empty quotation marks for right now, and then we'll set the type to button, and I'll close off the opening button tag. I'll use my left arrow and move the cursor back in between the quotation marks in the class, and we'll give it a btn class, a space, and then a btn-primary, the color of the button primary blue. Then I'll go to the end of Alice and add a button closing tag, copy it to my clipboard, and paste it after each one of these other character names. So now you can see in Chrome that we have a horizontal row of blue primary buttons. I'm going to separate these characters arbitrarily. What we're going to do is set up a button toolbar, so I'll select all all these buttons, and then I'll hit Shift+Command+A, and I'll type in a div tag, and I'll hit Enter, so now they're all wrapped in a div tag. Then I'll grab the first grouping of buttons, hit Shift+Command+A again, and set those in their own div. I'll grab the second grouping of buttons, hit Shift+Command+A, and once again, those will be in their own div, and then finally, we'll grab the last two, hit Shift+Command+A, and now those are all in their own div. Now we'll go back up to the first div grouping, and we'll add a class, and we'll set it to btn-group. I'll copy the class to my clipboard. I'll paste in the second and the third divs. So right away in Chrome you can see now things are grouped together. Then finally I'll go to the parent div of all these things and add a new class. I'll add in button hyphen toolbar, and you can see the button groups are now joined together, but there's no longer any space in between them, so this time I'll put my cursor after the p, hold down my Command key, and put my cursor after the top p, and then together we'll type in a margin right with a setting of two, and now in Chrome you can see that the button groupings are separated. In the next clip we'll be doing Bootstrap alerts, so I will see you there.

Alerts
In this clip we're going to take a look at Bootstrap 4 Alerts, and an alert in Bootstrap is simply a message with a Bootstrap color background and a Bootstrap color font that you can use to call attention to something. I'm going to hold down my Option key and drag upwards in front of the alert message, and then I'm going to put in an opening div tag, and then we'll add the attribute class with quotation marks, and I'll close off the opening div tag. Then I'll go to the end of the first line and add a closing div tag, copy it to my clipboard, and I'll paste it after each one of these other lines. Hold down my Option key, slide up within the quotation marks of the class, and I'll add alert, space, alert-primary. So again, that is going to set up the colors in Bootstrap. So I'll scroll around, and you can see everything's in primary blue. Next, we'll change the second one to secondary. We'll change success to success, warning, info, light, danger, dark, and then I'll pull up Chrome, and we can see that all of the alert Bootstrap colors are there. I'll pull Brackets down again, I'll highlight Alert Primary, and hit Shift+Command+A, and I just want to demonstrate that we can add strong tags or actually any tags to any words within the alert. For instance, I'll select Alice, and hit Shift+Command+A, and then add anchor tags, and I'll set the href equal to hashtag. Inside of Chrome now you can see that the word Alice is a link. So you can make the alert like a button as well. I'll add a horizontal rule with a class of m-5 to the bottom. I'll scroll down in Chrome, so we can see the line of text there. I'll make some room at the top of the line. What we're going to do with this line is turn it into an alert that is dismissible with an animated fade. Then I'll select the entire line and hit Shift+Command+A once more, and this time we'll type in the word button. I'll go after the n in the opening tag, and I'll type in a class, and set it equal to close. Then I'll set a data-dismiss equal to alert, and after that we'll set this to the type of button, and in Chrome right now you can see we have a button with those words in it. Next, I'll select the entire button tags set, hit Shift+Command+A, and I'll wrap it in a div, and in the div I'm going to add a class equal to alert alert-warning, so its color is amber. Then I'll add alert-dismissible, and then we'll set the animation to fade, and we'll initially show it, and I just realized I put the message in the wrong spot, so I'm going to cut it to my clipboard, and after the closing button tag put in a return and paste it after that. Inside the button we're going to set up a span, and we'll set it to &times;, which will put a little x at the far right because the button is what you're going to click on to eliminate or hide the message. So now we have a dismissible alert with an animated fade, and I'll show this a couple of times. In the next video what we're going to do is take a look at Bootstrap badges, and I'll see you there.

Badges
In this video we explore badges in Bootstrap 4. 0. So here I have my working file, and I'm going to go in front of Some Poetry, and I'll add an h1 tag, cut the closing tag to my clipboard, go after the last l in Carroll, and insert my cursor. I'll add a set of span tags, and in between them I'll put the word read. Then we'll go to the opening span tag and add a class of badge, and space, and then badge-primary, and I forgot the d, so I'll add it, and in Chrome right now you can see the word read reversed out of a blue field. I'm going to change the word read to the word New, and now we can see New reversed out of a blue field. I'm going to select the second line now, and then I'm going to hit Shift+Command+A, so that Emmet opens up, and I'll type in the word button, and now the second line is wrapped in button tags. In the opening tag we'll add the type of button. Go outside that quotation mark and add a class, and we'll set it to btn btn-block, so the whole thing expands to the width of the parent container. Now I'll color the whole thing green by adding btn-success, and at the end after the period I'm going to add some span tags. In between the span tags I'm going to put the number 20. This could be a number that's generated by a server or anything you want. Twenty is just an arbitrary number, so I'll go back to the opening span tag and we'll add a class, and we'll set the class equal to badge badge-light to make a black text against the white field. I don't like that so much, so I'm going to change it to dark, and now it is a white 20 against a dark field, and inside of the button class then, I'm going to add another class, btn-large. If you go down to Chrome you can see that we have a huge clickable button with a badge span on it. I'm going to add a horizontal rule, and we'll give it a class of margin hyphen three to set the areas apart. Then I'll put in some space, and I'm going to grab all the poem names, copy them to my clipboard, and make some room. Go back up again, and paste. So we have two sets of these now. I'm going to hold down my Command key, and I'll grab Jabberwocky, and I'll go through and grab each one of these poem names, and we'll finish off with, You Are Old, Father William. I'm going to hit Shift+Command+A, and I'm going to type in the letter a. For the href I'll set it a hashtag, move my cursor after the closing quote, make a space, type in class, and set it to badge badge-primary, and down below inside of Chrome we can see that all our badges are primary blue. I'll go back to the second one and change it to secondary. I'll go to the third one and change it to success. Next one we'll set to danger. Then we'll set warning, then we'll set info, light, and dark, and now in Chrome you can see all the badges and all the different Bootstrap colors. Go back to Brackets, and I'm going to scroll down to the second set of poem names, and this time I'm going to select all of them again, while holding down the Command key, and I'll end up at You Are Old, Father William again, and this time I'll hit Shift+Command+A. I'll type in the word span. Hit the Enter key. I'm going to move my cursor left with the arrow key, and then I'm going to put a space after span, and we'll add the class of badge space badge-info, and since you just watched me change all the colors I'm not going to do that again. We'll just leave them all this info blue color. Now I'm going to type in badge-pill, and if we take a look now in Chrome you can see that we have a set of badges that look like pills. So that is a look at badges in Bootstrap 4. 0.

Summary
In this module we learned about buttons in Bootstrap 4. We started by exploring buttons and Bootstrap colors. Then we saw the same color set, but this time without line buttons. We learned how you can make buttons from other HTML tags. We discovered button groups. We talked about making button groups with dropdown menus, and then we built radio and checkbox buttons. We examined button toolbars. We then looked at alerts and dismissible alerts. Finally, we dug into the Bootstrap Badges. In the next module we will work with images, tables, and cards.

Images, Tables, and Cards
Introduction
In this module we learn about Bootstrap 4 Images, Tables, and Cards. We'll start by adding the image classes to images. Next, we'll make image figures. We'll learn about adding font awesome icons to our site. We'll learn how to add cards. We'll talk about cards with Bootstrap colors, and then we'll make card decks in groups. We'll learn how to add card columns. We'll discover table classes. We'll use borders. Finally, we'll add media objects for repetitive items on our page. So let's get started.

Images
In this clip we're going to take a look at images in Bootstrap 4. So in our working file I already have some titles, and I have a URL. I'm going to select this line of text, invoke Emmet, Shift+Command+A, and then add h6 tags around it. So the opening tag will add a class, and we'll set it to display-4, and then we'll set the text color to text-secondary. Now I'm going to grab the URL that's here, and again, use Emmet, Shift+Command+A, add an anchor tag, and right away inside the href because it was a URL it converts the URL into the href. So I want to take the URL from in between the tags and delete it. In between the tags I'll put Get the Original, and we'll add a class to the opening anchor tag, and we'll set it to btn btn-info, then we'll add a margin vertical of a setting of five, and they had some paragraph tags, and in between the paragraph tags I'm going to put an image tag, and we'll set the source equal to image jabberwocky, and then we'll add an alt tag of Jabberwocky. Close that off. When I pull up Chrome you can see a huge image is there, and it's not responsive right now. High resolution image. Go back to Brackets, and we'll add a class of image hyphen fluid, and now we go into Chrome and you can see that the image is now responsive, and that's as hard as it gets to add a responsive image to your web page. Play with the size of it for a little bit, so you can see the different sizes. We'll go back to Brackets. I'm going to add some style tags right now. Underneath the title tag I'm going to grab the p tag and change it to a div, change the closing p tag to a closing div tag, and we'll add a class equal to image div, and this is my own class. I'm going to copy it to my clipboard, go up between the style tags, add a dot, and paste it. Add curly braces, open them up, and we'll set the width of this to 200px. I'll put in an image tag after the image div class. Then we'll scroll back down to the div, and inside that class I want to give it a float-right, and now we can see the image floats to the right side of the parent container. Get rid of the right. There's also a float-left, but it looks the exact same, so I'm not going to show you that. I will show you d-block mx-auto, so what we're doing here is centering the image in the parent container. Go back up to the style tags and we mark out that width, and we're going to add rounded, so we have nice rounded corners on our image. Then I'll add an invisible class, and that makes the image invisible, and of course, I can also add the class of visible, and I can toggle in between visible and invisible with jQuery. So that is a look at images inside of Bootstrap 4. In the next video we'll look at image figures, and I'll see you there.

Image Figures
In this clip we're going to take a look at Bootstrap 4 Image Figures. So I have my working file open. I'm going to add a figure tag, and I'm going to give it a class equal to figure. Close off the figure tag, open it up. Inside there I'm going to set an image, and we'll set the source equal to image tea-party. jpg. We'll set the alt equal to Tea Party, close off that image. Underneath the image tag we'll give it a figcaption tag, and we'll give the figcaption tag a class of figure-caption. Close that off, and over in the hatter-quote I have some text. I'm going to copy it to my clipboard, go back to Brackets, and paste it. In the opening tag we're going to give it a class of figure hyphen image, and then we'll give another class of image hyphen fluid, and we'll go back to Chrome, and you can see it's responsive, however, our quote is a little bit too long, so what I want to do is just delete half of it, and now you can see that by default the quote is floating to the left in Chrome. So to make it move to the right all I have to do is add text-right, and the text goes over to the right side of the image now. Go back to Chrome, and I'll make it a little bit wider, so you can see the text over to the right on the image. So that's a look at Image Figures. In the next clip we're going to take a look at Font Awesome images, and I'll see you there.

Font Awesome
In this clip we're going to look at Font Awesome. So I have my opening container div and my working file. Above it I'm going to put in the footer tag, cut the closing footer tag to my clipboard, and paste it after the container. Then we'll add a class to the footer of bg-dark. Then we'll also say the padding on the vertical axis is a setting of five. I'm going to go down to Chrome and rearrange this, so we can see everything happening better. Then go back to Brackets, and in the footer classes I'll add text-muted, and then we'll also add text-center. Go in between the container divs now. Going to go over to my footer. txt file, and I'm going to copy the two paragraphs at the top of it, and I'm just going to paste them, and there we have the copyright, and we also have a quote from the cat. I'm going to add a space before the c. Then we'll add some small tags. I'm going to cut the closing small tag out and paste it after the closing paragraph tag, so the text is a little bit smaller. I'm going to line up everything, slide up before these two paragraph tags, and tab them in. Underneath the closing small tag I'm going to add another paragraph tag, and this time I'm going to set in an image, and we'll give it a class of image hyphen fluid, so it's responsive, and then we'll give it a source of image, and we have the cat. png file there, and I'll set the alt name to cat. Close off the image tag, and now you can see we have a cat at the bottom of our screen. I'm going to set space before the word small, and this time we're going to put in a new div, and I'll open that up. In the opening div tag I'm going to add a class of btn-group because we're going to make a button group, and then we're going to add a btn-group hyphen small, so these things are smaller, and then we'll add a margin vertical setting of three, and the role of this will be a group. Going to add an aria-label, and we'll set that to footer. Add some space in between the div tags. Then we'll add a button tag, and we'll give it a type of button, and we'll set the class equal to btn btn-secondary, so it's a gray button, close off the button tags, and inside of that we're going to add our Font Awesome now. Finally, we're at the point of adding Font Awesome, and I'm going to add some i tags, and in the opening i tag I'll add a class, and we'll set that to fa for Font Awesome, and fa-github-alt. Make the interface wider, so we can see everything in one line. Pull it to the left. Go to the end of the button line, and duplicate it three more times. Change the second one to google, change the alt to plus, go to the third one, change github-alt to twitter, the fourth one, and we'll get rid of the github, and we'll change it to snapchat-ghost. So now if you notice inside of Chrome we don't really see any Font Awesome icons, and that's because we have not linked to Font Awesome yet. So what I need to do is go back up to the top, and right underneath the Bootstrap link I'm going to add a new link from our footer. txt file, copy it to my clipboard, go back over and paste it. Now right away in Chrome you can see that we have the Font Awesome icons there, and their scalable vector graphics are SVGs, which means they look good at any size. I'm going to change the sm to an lg for large, and you can see them a lot better now. I'll click on them, and you can see if they work like buttons, and where do you get all these icons from? Well, you get them from the Font Awesome Bootstrap page. Now there is a whole bunch of Font Awesome icons available, and there's free ones, and there's ones you pay for. There's also ones that go inside of Bootstrap. On this particular page you can see there are a lot of Font Awesome icons we can choose from, and for instance, I'm just going to arbitrarily grab one here, maybe this airplane, and choose Copy the HTML link to my clipboard, I'll go back to Brackets. I'm going to get rid of this Google plus icon here, select it, and I'll replace it with the Font Awesome plane, and now you can see right now our second button has an airplane in it, and that's really simple to do. All these Font Awesome icons are available for you to use inside of Bootstrap. So that's a look at Font Awesome images. In the next clip we're going to take a look at Bootstrap 4 cards, and I'll see you there.

Cards
In this clip we're going to take a look at Bootstrap 4 cards, which is a very powerful feature inside of Bootstrap 4. I'm going to start off by creating a div, and we'll add the class of card, close off the div, and open it up. We'll add a new div, and this time we'll give it a class of card-body. I'll close off that div and open it up, and then I'm going to pull over my quotes. txt file and copy the text from it. Go back to Brackets and paste, and you can see right away in Chrome right now we have the quotation there from the white rabbit. I'm going to go above the div with the class of card right here and add a paragraph tag, and we'll add a class of m-5 for margin, and in between those tags I'm going to add a non-breaking space, just to give us a little bit more room from the top of our page. Go into character, it looks good. Inside the div of the car body I'm going to add h4 tags, and right underneath those I'm going to add h6 tags. Make more room and add paragraph tags. Cut the closing paragraph tag to my clipboard, and paste it after the white rabbit. Then underneath that I'm going to give it an anchor tag with an href of hashtag, and we'll give it a class of btn btn-info, close off that anchor tag, put Read Chapter IV in between the tags, copy Chapter IV to my clipboard, go up to the opening tags, but this time I'm going to hold down my Option key and then slide upwards, and choose the h6 and the h4 opening tags, and we'll add a class to these of card-title, and the second one I'm going to add the word sub in front of the title. Then I'm going to paste the Chapter IV I copied earlier in between the h4 tags. Go to my quotes. txt file and copy the title of the chapter to my clipboard. Go to the h6 tags and paste it, and now you can see inside of Chrome we have a Bootstrap 4 card. Now I'm going to add an image to this card, so I'll go above the card-body div, and I'll add an image with a class of card-img-top. Close that class off, and add a source tag, and we'll set this to image, and we'll choose Alice-white-rabbit, then I'll add an alt tag, and we'll put White Rabbit in there, close off the image tag, and you can see we have a huge white rabbit illustration there now. I'm going to go up to the opening div with the card class, and I'm going to add a style tag in there, and we'll simply set the width of this to 20em, and now you can see the card becomes a lot smaller. Scroll around in Chrome, so you can see the whole thing. I'm going to open Chrome up, so you can see it even better. Okay, we'll move Chrome back down now. I'm going to take the image tag, delete it, and this time I'll put in a new div, and we'll add a class of card-header, close off the div, open it up, and inside the card-header I'm going to put emphasis tags, and in between those I'm just going to put the title of the book, Alice in Wonderland. At the end of the emphasis tags I'll put a pipe, put Chapter IV, and now you can see that our card has a header on it. I'm going to change the margin in the opening paragraph from five to two, copy the whole thing to my clipboard, go underneath it and paste it, so we have a little bit more room. Now we can center the card inside of Chrome. Underneath the closing card body div I'm going to make some room and add a new div, and we'll give this a class of card-footer, and we'll also say the text is muted in it. Close off that div and open it up, and inside there I will grab the Chapter IV, cut it to my clipboard. Paste it. I'll get rid of the pipe character, and now you can see in Chrome we have a card with a header and a footer. Go back into Brackets, open that up a little bit more. I'm going to take out the Alice in Wonderland and delete it, and now I'll put in a ul, and we'll give it a class of nav nav-tabs, and we'll say it's a card-header-tabs, and I'll close off that ul, and I'm going to get rid of the style width here, and delete it. Then in the opening ul tags I'm going to put in an li tag, and we'll give it a class of nav-item, close off the li tag, and inside of it we'll put an anchor tag with a class of nav-link. We'll also add an href of hashtag, and I'll close off the anchor tag, and inside of there I will put in Chapter I. I'll duplicate it two more times. I'll change the second one to Chapter II, and the third one to Chapter III, and now you can see we have tab navigation in our tab set. Let's go ahead and make the first one active, and I'll delete the footer, and there we go. Now we have tab navigation for our card set. So that's a look at an intro to cards. In the next clip we're going to take a look at cards with colors and shadows, and I'll see you there.

Cards with Colors and Shadows
In this clip we're going to take a look at cards with colors and shadows, meaning the Bootstrap colors, so you can see that I have a line of the Bootstrap colors, and what I want to do is come over to the first card, and I already have a card for us in the working file. I'm going to go to the opening div, and what I want to do is set the text to white, and then we'll set the background to primary, and now you can see the card has a Bootstrap primary blue background. Get rid of primary, and change it to secondary. Now we have a Bootstrap secondary color, and I'll just continue to go through the list. Success gives us the green color. Info gives us kind of a cyan color. Warning gives us the amber color. Danger gives us a red color, and we have light, which of course, the text doesn't work against, so I'm going to change white to dark, and that looks better, and then we also have a dark, so I'm going to change light to dark, and then dark to light. So we have reversed out light type against the dark background. I'm going to delete these, and now what I want to do is show you the ability to add shadows in Bootstrap 4. So I'm going to add shadow hyphen small. If I go over to Chrome right now and kind of jump off of the area we're working on. Now the shadow-sm gives us a shadow that you can't really see all that well. Start off with just the word shadow, and now you can see we have a shadow there. Pull this up a little bit more, so you can see it better, and then we have shadow large, so we have a much larger shadow. I'm going to change shadow to shadow-none, so we can turn off the shadow when we need to. I'll get rid of the shadows entirely. Now what I want to do is add a photo overlay to our card, and I'm going to change the whole thing to background hyphen dark, and text-white. I'm going to cut out the card-header, and I'm going to replace it with an image, and we'll give it a class of card hyphen image, and we'll add the source of image slash stars, and we'll give it an alt tag of stars. I'm going to take the card-body div, and I'm going to erase the word body. I'm going to replace the word body with the word image, img, and hyphen overlay, and now you can see the card body has jumped up on top of our photo background, and I'm going to add a new paragraph that just says small text there, so you can see how it works. I'll add in color, copy the class card-text to my clipboard, paste it in the opening paragraph tag, and we'll set it to text-muted, so you can see that the Bootstrap 4 colors work and the card photo overlay as well. So let's look at cards with colors and shadows. In the next video we'll be looking at card decks and groups, and I'll see you there.

Card Decks and Groups
In this clip we'll take a look at card decks and groups, and we have our working file open, and I'm going to add the div with a class of card-group, close it off, and open it up. Nested inside of that I'm going to add an h4 tag. Go to the end, add a new line, and then we'll add some paragraph tags. Go to the end, add a new line, and then we'll add an anchor tag, and this I'll give an href of hashtag, and we'll add a class of btn btn-info, so it's a blue button, and then finally btn-sm for a small button. Close off the anchor tag, and I'll put Read More in between the tags. Let me readjust the interfaces here, so we can see everything. I'll slide Chrome down, and we'll slide Brackets around. Go back to Brackets. I'm going to change the word group to the word body, so that we can have multiple cards. Then I'm going to put a space above the div with the class of card-body and add a new div, and we'll add a class of card, close off that div, cut the closing div tag to our clipboard, and paste it underneath there. I'll tab this in, so it's neater. I'll hold down my Option key and slide upwards, and tab these three in, so that they're neater. I'm going to copy the class of card-body to my clipboard, and I'm going to paste it in the opening h4 tag, and I'm going to change the word body to the word title, and then in between the h4 tags I'm going to put Chapter I. In the opening paragraph tag I'm going to add another class, and this'll be card-text. Copy the whole thing to my clipboard, paste it underneath, and paste it a second time. We'll change Chapter I to Chapter II, and the third one to Chapter III. Then before all these I'll put in a space, and we'll have a new div with a class of card-group. Close that off. Grab the closing tag, and paste it underneath everything, and I just noticed I have car instead of card, so let me add the d, and there you can see now we have a card group in Chrome. Go over to quotes. txt, grab the first quote, copy to my clipboard, and paste it in the first paragraph. Grab the second one, paste it into the second paragraph, and grab the third one, and paste it into the third paragraph, and now when we go to Chrome I'll make this a little bit bigger. Now we have a card group of stacked cards, and it looks very nice. To change this group to a deck all I need to do is go back and change the word group to deck, and back in Chrome, rather than having joined cards now we have independent cards, and they are responsive, so when I go down to a smaller size they form a single column. So that's a look at card decks and groups. In the next video we're going to look at card columns, and I'll see you there.

Card Columns
In this very short clip we're going to take a look at card columns. So what I have prepared for us already is a whole bunch of cards pre-built, ready to go, and you can see right now they take up the entire width of the object, and they're all stacked on top of each other. All I need to do to get to card columns is simply to go above the card div, and start a new div, and this time we'll add a div with the class of card-columns, close that off. I'm going to cut the closing tag to my clipboard, scroll all the way down to the bottom, just before the very end, and paste it, and right away now in Chrome you can see we have three columns, and these cards are stacked automatically for us. I can pull over to the Chrome interface, so they take up the entire width, and now you can see that we have columns of cards that will fill in automatically for us as we add more content, and that is a look at card columns. In the next clip we'll be looking at Bootstrap tables, and I'll see you there.

Tables
In this clip we're going to talk about tables, and I have provided for us in the working file an ordinary HTML table, and you can see the old timey ways of adding the border and the width. I'm going to delete those, and we'll add in the class of table, and right away, thanks to Bootstrap, we have a much better looking table than we did before. I'm going to adjust Brackets a little bit more, so we can see this whole thing change as I add more classes. Scroll back down. Right after the word table we'll do table-dark, and now we have a reverse style table. What I want to do inside of each of the table header tags is hold down my Option key and slide upwards, and we'll add the scope of column, and then I'm going to go in front of this tr tag and we'll add the scope of row. Copy this to my clipboard, go to each tr tag and paste. Paste it in Humpty Dumpty. Paste it in the March Hare. Scroll back up again. Now what I want to do is change these classes to other Bootstrap classes, so I'll get rid of table-dark, and in thead what we're going to do is add a class thead-dark, and now right away you can see we have reversed out text from a dark background. Delete the word dark and add the word light, and we have a light gray with black type on it. I'm going to get rid of this entirely, and we'll go back up to the table class attribute, and we'll add table-striped, and now we have zebra striping on the table, and we can do table-dark, and it will reverse it out. Get rid of striped and change it to border, and now we have bordered sections on each one of the tables. Get rid of the word table-dark, so you can see table-bordered with a white background. Now we can get rid of the borders entirely by changing border to borderless, and we'll add table-dark once more, so you can see it reversed out. Get rid of that, get rid of table-borderless, and we'll add table-hover, and now when I go into Chrome, as I scroll over each one of these items it highlights, and again, once more we can do table-dark, go back to Chrome, and you can see the same thing happens when I scroll up and down over the lines of the table. Get rid of table-dark, get rid of table-hover, and we'll change out the table hyphen small, sm, and table-dark, and right away we have a small table that's dark, and we can also have a small table that has a white background. Get rid of both of those. I'm going to go to the tr tag, and this time we'll add a class of table-active, and that grays out the background on that particular part of the table. Copy that class to my clipboard, and I'll find the other tr, paste it, and we'll change table-active to table-primary, and now you can see you have a blue background. Copy that whole class. Go down to the next tr, paste it, change primary to success, go down to the next tr, paste it, change primary to warning, and we'll do the last one, paste it, and change primary to danger. So now you can see the Bootstrap colors are there, and the rest of them are there as well. I'll let you play with those different colors. In the next clip we'll look at borders, and I'll see you there.

Borders
In this clip we'll take a look at borders. We have our working file open, and right now there's an image in it. I'm going to show off the different ways you can display the borders on an image. The first way is to round the corners, so I'm going to add rounded, and you can see we have very, very subtle rounding on the corners of the image now. If I want to round just one part of the image I can add a hyphen top, and now the top is rounded. I can add hyphen right and the right is rounded, rounded-bottom rounds the bottom, and finally, rounded-left rounds the left. To put the whole image into a circle it'd be hyphen circle, and to get rid of the border entirely it would be 0, and you could add this with jQuery. Get rid of the image. Right underneath that you'll see we have a div that I colored in with the background of blue, so I'm going to change that to light gray, and then we're going to add borders around this one. So the first way is just to add the word border, and you can see a very subtle thin border around the div now. next is border-top, and it's just along the top. I'm going to duplicate this three more times, and you can change it to right. You can change it to the left, and you can change it to bottom, and I'll select the div at the top, just so we can scroll up and down in Chrome, and you can see the subtle gray difference. Hold down my Option key and slide upwards before the word border, and I'm going to type in another class of border, and this time we'll change top to primary, right to secondary, left to success, and bottom to danger, and then I'll duplicate this several more times, and we'll add the other Bootstrap colors of warning, info, dark, and light. What I want to do is move the Chrome vertically, so we can see more of the squares. I'll move my Brackets over here, and as I scroll up and down now you can see the Bootstrap colors are all there. Let's change the background color to bg-dark, so you can see the colors against the dark background. I'm going to add one more that I left off, and that is the white border against the dark background. So there they all are. I'll get rid of the word dark, and add secondary, and now we can see the border's against the neutral gray. Change it back to light, and there are all our borders. In the next clip we'll look at media objects, and I'll see you there.

Media Objects
In this clip we're going to create media objects in Bootstrap 4. I'm going to add a padding vertical of a setting of five, just so we can see our media objects a little better. Then we'll add a div, and we'll give it a class of media. I'll close that off and open it up. We'll add an image tag, and we'll set that class equal to margin right at a setting of three, and we'll set the source equal to image rabbit. png, and then we'll set the alt attribute to rabbit. I'll close that off, and go down to the next line. We'll create a new div, and we'll give it a class of media-body. Close that off and open it up. Inside there we'll set an h5 tag, and we'll give that a class of margin top hyphen 0. Then we'll close off the h5 tag. I'm going to pull over quotes. txt, and I'm going to grab the title of Chapter IV, and I'll paste it in the h5 tags, and I'll go to the end of the h5 line, put in a return. We'll go back to quotes. txt and copy the quotation, and then we'll paste it underneath the h5 class, and in Chrome right now you can see we have a responsive media object. I'm going to pull the Chrome window back to the width of the video window, go back to Brackets. Underneath the title tag I'm going to add some style tags. Open those up. Inside that we'll put an image selector, and then I'll set the width equal to 64px, and the height is automatically taken care of. Scroll back down to the media div. In the image class I'm going to add align-self-start, and now the image is at the top of the media object. I'm going to delete the word start, and we'll replace it with the word center, and now in Chrome you can see that the image is hovering in between the text. There's not a lot of text there, so I'm going to go to the end of the word rabbit, and type in the word lorem, and hit the Tab key, and Emmet will put in a paragraph of lorem ipsum text. Now we can see that the image is centered in the media object. Delete the word center, and put in the word end, and now you can see that the image is at the bottom of the media object. I'll get rid of this whole line right here. I'm going to copy the whole media div to my clipboard. Now I will nest it into the first media object by putting a space right before the closing div tag and pasting, and in Chrome right now you can see a nested media object within the original media object. Go back to Brackets, and delete that. Close up that extra space. I'm going to get rid of the lorem ipsum I put in there, so we'll return to the original phrase. What I want to do now is set the image back to align-self-center, so it's in the middle of the div. Make room above the opening div and put in a ul with a class of list-unstyled. Close off the ul tag, grab the closing ul tag, cut it to my clipboard, and paste it underneath everything, and tab it over. I'm going to change the lower closing div to closing li, and then the opening div tag to li, so now it's a list item. Copy the whole list item to my clipboard. Make room underneath it and paste. Do the same thing. Paste it again, and paste it once more. So we have four media object items, and this would simulate repetition gathering information or content from some other source. So that is a look at media objects.

Summary
In this module you learned about Bootstrap 4 images, tables, and cards. We started by discovering the image classes. Next, we made image figures. We learned about adding Font Awesome icons to our site. We created cards. We talked about cards with Bootstrap colors, and then we made card decks and groups. We learned to add card columns. We discovered table classes. We used borders. Finally, we added media objects for repetitive items on our page. In the next module we'll learn about forms in Bootstrap 4.

Forms with Bootstrap
Introduction
In this module we'll learn about Bootstrap 4 form classes. We'll start by building a plain vanilla HTML form. Next, we'll enhance that form with Bootstrap 4 form classes. We'll learn about adding the form check class to enhance radio buttons and checkboxes. We will discover inline forms. We'll talk about multi-column forms, and then we'll add some validation classes. We'll examine multi-sized fields and adding stuff before or after form fields. Finally, we'll create select menus, add checkboxes and radio buttons, and connect them to fields. So let's get started.

Setting up Your HTML Form
In this clip we're going to just set up a plain old vanilla HTML5 form, and then we're going to start adding Bootstrap classes in the next video. Included with the working files is a form. txt, and I'm just going to copy it to my clipboard and paste it, and then I'll move the txt file off screen again. I'll place my cursor in front of the headline, and I'll set in h3 tags, cut the headline to my clipboard, and paste it in between them. Then I'll go down a couple of lines and add a form tag. I'll cut out the closing form tag, scroll down to the bottom of the text, and paste it there, and as long as we're down here you might as well take care of the submit button, so I'll put my cursor before the s in submit, and then I'll select the whole thing, and I'll hit Shift+Command+A for Emmet, put in a button tag, and hit Enter, and now we'll set the type of this equal to Submit. Scroll up again, and right before the character's name I'll put a label tag, and we'll say this is for name, cut out the character name text, and paste it in between the label tags. Then I'll put an input tag in front of the next line. We'll set the type of this to text, and the id equal to name, and we'll say the placeholder is equal to this text that was already there. So I'll close off the quotation mark, put in a greater than sign, delete the space between the two lines. I'm going to select both lines and hit Shift+Command+A, and I'm going to type in the word div and hit Enter, and we'll scroll down while doing the next set. I'm going to grab three lines of text here, Shift+Command+A div, hit Enter, and move this one down to the next line. Line things up, and I'm going to select the second your character's email, put that in its own div, except hit Shift+Command+A and set this in small tags instead of the div. Then I'll copy the input from the name, and I'll paste it right before I enter your character's email address. Close that off. Put Character's Email Address on its own line, and I'll copy the label tag and paste it in front of it. Now I'll change name to email, and then I'll close off the label tag, and I'll copy email to my clipboard, and paste it in the id. Now I'm going to hit Character's Password and hit Shift+Command+A, and change the word to div and hit enter. Put Character's Password on its own line, and move the closing div tag down to its own line. Once more, I'll copy the label for email opening tag to my clipboard. Paste it before Character's Password, and then I'll close off the label tag. Then I'll copy the entire input line, make room for it, and paste it after the character's password. I'll go back and change the text to Pluralsight, and above that that type should have been email instead if text, so I'll change that right away. Then I'll go back and copy password to my clipboard, and paste it into the for attribute and the id attribute. I'm going to grab that whole line right there and change that to password. Capitalize the P. Then I'll put a readonly attribute inside of there. Now we'll go down to the Species, Human, non-Human, I'll set that in it's div tag with Emmet, Shift+Command+A. I'll put the closing div tag on its own line, and tab it over. I'll put species on its own line, and once more I'll grab the label for password opening tag, copy to my clipboard, and paste it before species. I'll change the word password to the word Species, and then I'll set in a closing label tag. Then underneath that I'll put in a select tag with an id of species. Close that off. Grab the closing select tag, cut it to my clipboard, and paste it right after non-human, and I'm going to close that off, and I'll hold down my Option key and slide upwards, so I grab both lines. Tab them in, and then we'll put an option opening tag there, and then I will close off the option tag on Human, and then I'll close it off on Non-Human. If we take a look at Chrome now you can see that we have a dropdown with Human and Non-Human inside of it. Go back to Brackets. I'm going to select the Message for the Queen of Hearts, wrap it in div tags with Emmet, put it on its own line, then I'm going to copy the label for species opening tag and paste it there, except I'll change the word species to the word message, close off the label after Hearts, put in a new line, and this time I'll set in a text area opening tag, and give it an id of message, and then we will also give it rows, and then we'll give it rows equal to three, and I'll close off the text area. Now we'll go down to upload a file, and I'll grab upload a file and maximum size is three yottabytes; look it up, and Shift+Command+A I'll set it in its own div. Same routine. Set these over. Put everything on its own line. Copy the opening label tag. Paste it in front of upload. Change the for to file. Put in a closing label tag. I'm going to put in an input tag with a type of file, and I'll give it an id of file. Close it off. I'm going to wrap the word Maximum size is three yottabytes in a small tag, and then I'll give the small tag an id of helpFile, and we're done with that. You can see now we have a file upload section to our form. I'll pull-down Chrome, and there is our finished HTML form. In the next video we will add the Bootstrap 4 classes, so I'll see you there.

Styling Your Form
In this clip we're going to add all of our Bootstrap 4 classes to our HTML form. That is one of the strengths of Bootstrap is it makes your forms look wonderful with a minimal amount of effort on your part. So in Chrome right now let's scroll up and take a look, scroll back down, and we'll handle the submit button first. So I'm going to go over to the opening tag and add a class equal to btn btn-success, so it's a green button. Then I'll scroll up in Brackets. In the opening div tag I'm going to add a class of form-group. I'm going to copy this to my clipboard, and then go through each opening div tag and paste it in place. We'll start off with password, so do species, we'll do message, and we'll do upload, and now if we scroll in Chrome you can see our form's already taking shape. Now I'll go back to the top of Brackets, and this time in the input tag I'll add a class, and we'll set it to form-control. I'll copy that, and then I'm going to go through each input tag and paste it. So I'll paste it in character's email. Put in a space, and I'll scroll down in Chrome, and you can see it. While I'm here I'm going to add a class to the opening small tag, and we'll say form-text space text-muted, so it becomes a light gray. Then I'll recopy form-control to my clipboard. We'll scroll down to the Character's Password, and I'll paste it before the type and add a space. Then we'll scroll down to species, and I'll paste it into the select tag, and we'll go back to Chrome and now you can see the dropdown looks a lot better. We'll scroll down to message, and I'll paste it right after the opening text area tag. Scroll around in Chrome, and now you can see that that is Bootstrap 4. Scroll down to upload a file, and I'll paste it right after the word input. Then I'll add one more word, hyphen file. I'm also going to add a class in the opening small tag, and we'll name it form-text, and then we'll also do text-muted, so it's grayed out, and I'll pull down my Chrome, and you can see that our form looks much better than it did when we first started. Put Chrome back up, and scroll up in Brackets. In the h3 I'm going to add a class of display-4, and then I want the color to be muted as well, so we'll type in text-muted. What I want to do now is create a two column layout for our form, so I'm going to put in a div class with a class of row. If you remember we can only have multi columns in a row div. Take the closing div tag and slide to the bottom of my form and paste it, and then I'm going to put a remark that says end row, so I know what that closing div tag is for. Scroll back up again, I'll put in a return, and this time I'll give it a new div, and we'll set the class equal to, and I'll close off the div tag, and we'll go in between the quotations in class, and we'll set in column hyphen sm hyphen nine. Duplicate that by putting my cursor at the end, and hitting Command+D, and I'm going to change the 9 to 3 in the second one, so they add up to 12. Cut the closing div tag of the first one and the entire div of the second one to my clipboard, slide way down, and paste it right underneath the closing form tag. Then I'll open up the second div tag, and I'll set it to an image, and the source is rabbit. jpg, and I'll set the alt equal to rabbit. Inside there I'll add a class of image hyphen fluid, so it becomes responsive. Pull-down Chrome, and now you can see that we have a wonderful layout with a form. Scroll down a little bit. I'm going to add one more class to my Upload a file, and this is going to be btn btn-warning. That's a little bit too harsh, so I'm going to change that warning to light. Go back up to the form, and you can see that now that has a very subtle gray background behind it. In the next video we'll be learning how to check forms, so I'll see you there.

Check Form Classes
In this clip we'll be checking our forms with the form label check and form check classes, and these classes simply group checkboxes or radios on the same horizontal row by adding the class to the line. So let's try it out. In our working file we already have a whole bunch of text that we can play with, so I'm going to start off by adding a form tag, grabbing the closing form tag, cutting into my clipboard, and pasting in after the word Submit. We might as well do the submit button classes while we're here, so I'm going to wrap it in button tags using Emmet, and then I'm going to add a class to the opening button tag of btn btn-info. So now the button color is blue. I'm going to add a type of submit to the submit button. I'm going to grab the I dislike the book line, and using Emmet, Shift+Command+A, I'm going to wrap it in a div tag. I'll put the text on its own line, put the closing div tag on its own line. Now I'm going to add a class to the opening div tag, and we'll say form-check. Copy the whole thing to my clipboard, put a line after the opening div tag, and let's hit in a label with a class of form-check-label. Close that off. I'll grab the closing label tag, and I'll paste it right after the line of text. Put in a return after the label tag, and this time I'll set in an input with a type of checkbox, and we'll set a class equal to form-check-input, and I'll close off the input tag, and now you can see in Chrome we have a checkbox in front of our text line, which I can turn on and off. I'm going to hold down my Option key, click and slide up in front of these lines, and tab them in. Let's go up and work on the next one. I'm going to grab all this text right here, and I'm going to wrap it in a fieldset tag, and then in the opening fieldset tag I'm going to give it a class of form-group, move the closing fieldset tag to it's own line, tab over the opening fieldset, put a space between the closing fieldset tag, and I'll move the first one down to its own line. Select the first one, and this time we'll type in the word legend, and hit Enter. Then I'll grab the, I haven't the slightest idea, Shift+Command+A, and set that in a div. I give up, Shift+Command+A, set that in a div, and then the last line, Shift+Command+A, and set that in its own div. Then I'll select that entire line again, and this time I'll set it in a label tag. Put the line of text on its own line, put the opening label tag on its own line, the closing label tag on its own line, and the div closing label on its own line. I'll tab these in. I'm going to select the attribute of for equals quotation marks and delete it, and replace it with class equals form-label-check. Put a return after that. I'm going to go back up to the second line and stick I give up on it's own line, tab it in, and then move the div tag down to its own line, and I'll make some room. Then I'll copy the opening label class, and I'll paste it. Then I'll copy the closing label tag, and I'll paste that. Go back up to the div tag for the first answer. I'll put I haven't the slightest idea on its own line. I'll move the closing div tag to its own line, and tab it all over. Paste the opening label tag in front of the line, and then I'm just going to close this off by hand. Tab it and make everything nice. Select everything, tab it over, and it looks like I made some pasting mistakes here, so I'm going to get rid of this one, and replace it with a closing label tag. Above the I haven't the slightest idea line I'm going to set in an input with a type of radio, and we'll set the class equal to form-check-input, and then I'll give it a name attribute with answers in the quotation marks. I'll also set the value equal to option1, and then I will close that off. I'll move over my interface, so I have a little bit more room. I'll put my cursor before the text line in the input and tab them in. In the opening div tag I'll set the class equal to form-check. Copy that to my clipboard, and then I'll paste the attribute in the second one and the third one. Go back up and select the opening input tag, copy that to my clipboard, and paste it right before I give up, and then tab that one over, and I'll also do it because it can produce a few notes and paste it there. Tab that over. Tab over the text. I just noticed I still have an opening tag instead of a closing one, so I will put in a closing label tag. So up in Chrome now everything looks right. I'll slide the Chrome interface down. One more thing I want to do is in the button class I'm going to add a margin top of setting five, so it separates from the others. Now I can turn on and off the checkbox in front of the text line, and I have three radio buttons here. I'll go back to Brackets, and because the third is actually the answer that Lewis Carroll started sending his readers when they nagged him about the answer of this riddle from the book. I'm going to set that to checked. So the page loads that one's checked, and that is how you set up inline form checking. In the next video we'll be looking at inline forms, so I'll see you there.

Inline Forms
In this clip we'll be setting up inline forms. I'm going to start off by adding a form tag, and we'll give it a class equal to form-inline, and I'll close off the form tags. Then I'll add an input tag, and I'll move my interface over, so we can see everything, and then I'll make it a type of text, and I'll add a class to that of form-control space with a margin right and a setting of two. Give it an id equal to name, and a placeholder that says Your cat's name, and I'll close it off. I'll duplicate it by hitting Command+D with my cursor at the end of the first line, and I'll change the id from name to password, and then I'll change the placeholder to password. Put in an extra line, add a label tag, open it up, and I'll put an input tag in between the label tags, and we'll set it to the type equal to checkbox, and we'll give it a class of form-check-input, close that off. Now I'll grab this line at the bottom, cut it to my clipboard, and I'll set it on its own line right after the input tag. In the opening label tag I'll add a class equal to form-check-label, add a space, and we'll set the margin right to a setting of two. Underneath the closing label tag I'll put another line, and we'll add a button tag. I'll put the word send in between the buttons. Go to the opening button tag, and add a class equal to btn space btn-warning, so it's an amber button. Then after the class attribute I'll give it a type attribute of submit, and that is our form. I'll pull-down the Chrome interface. You can check on We're all mad here, and you can send it. In the next video we'll look at multi- column forms, so I'll see you there.

Multi-column Forms
In this clip we're going to take a look at multi-column forms. I'm going to start off in our working file by typing in some form tags. Then in between them I'll put a div tag, and I'll give it a class of form-row, and I'll close off the div tag, and I'll open it up, and in between those div tags I'll add another div with a class of column that's abbreviated as col. Close that off. Use my arrow key to go to the end of the line and duplicate it. Then I'll use my left arrow key to go back and open up the second one. Inside that I'll put in an input tag. I'll give it a type equal to text, and I'll give it a class equal to form-control. Then I'll use the placeholder attribute of Hatter. Go to the end, and I'll close that off. Copy the whole thing to my clipboard, go to the first div column, and paste it in between there. Change the placeholder from Hatter to Mad, and back in Chrome we can see the whole thing. We actually have three columns here, but we have side by side text boxes. In the next video we'll talk about validation classes for JavaScript, and I'll see you there.

Validation Classes
In this clip we'll talk about validation classes, so because you've already seen my type in form groups before we're going to start off this one simply with two form groups already created, and I just want to show you that on the first one when you add the class, is-valid, and this is something you can do with jQuery or JavaScript or something, when the form is valid it will turn the border green. I'm going to copy is-valid to my clipboard, go down to The King of Hearts, paste it, and this time I'm going to put invalid, and now when you go back up to Chrome you can see that the border of this field is red. What you can also do when a form is invalid is leave a message, so I'll put in a return and a new line, and it's going to be a div with a class equal to invalid-feedback. Close off the div, open it up, and in between those div tags I'm going to put in Off with your head, and you can see up in Chrome that now the feedback message is Off with your head. In the next clip we'll take a look at input groups and add-ons, and I'll see you there.

Input Groups
In this clip we're going to look at input groups and add-ons. We'll start off in our working file with a div tag, and we'll give it a class of input-group. Close off the div tag, and open it up. Then we'll add an input tag, and we'll set the type equal to text. Then we'll add a class of form-control. Next, we'll add the placeholder, and we'll set that equal to Down the rabbit hole. Go to the end of the quotation mark, and we'll add aria-label equal to Down the rabbit hole. Close off the tag. I'll put in a space after the opening div, and I'll start another div, and this time I'll give it a class of input-group-prepend, and I'll close off that div. Open it up, and then we'll add a button, and we'll give it a class equal to btn btn-success to color green, and I'll close off the button tag, and I'll set the text in there of Go with an exclamation mark. Going back to the opening button tag, I'll add a space, and we'll set the type of this to button. Then we'll add aria-describedby, and we'll set it equal to prepend. Now up in Chrome you can see that we have a green button, and then we also have the text field with the placeholder text in it. I'm going to copy this whole thing to my clipboard, and paste it right underneath, and I'll cut the prepend div to my clipboard, paste it after the input type, change prepend to append, copy that to my clipboard, go to the aria-describedby attribute, and I'll paste append there as well. So now you can see in Chrome we have the button before everything, and then we have a duplicate where the button comes after everything. In Brackets I'll select the entire div class to my clipboard, and then I'll paste it right underneath everything, and I'll duplicate the button by putting my cursor at the end and hitting Command+D, and then I'll change the word go to Now, and I'll change success to info, so we have a green and blue button, and this demonstrates that you can prepend two buttons in a row. I'll scroll down and I'll copy the div class with the button after everything. I'll duplicate that. I'll paste it. Then I'll duplicate the button again, change Go to Now, and change success to info, and now you can see up in Chrome that we have a field with the two buttons following it. So you can have as many buttons as you want, and you can also have dropdown buttons, which we'll demonstrate in the next video. Now we'll create a field where we have a text span before and after the field, prepend and append. So I'll scroll down in Brackets, and we'll put in a new div with a class of input-group, and then we'll put a space, and we'll make the margin bottom of this a setting of five, and I'll close off the div and open it up, and then inside the div we'll set another div, and this one will give a class of input-group-prepend, and I'll close off this div. I'll put my cursor at the end and duplicate it, and I'm going to change the pre to a p. Then I'll open up the first one, and I'll open up the second one, and I'll separate the two divs with a space, and I'll scroll up, and I'll grab the input from down the rabbit hole. Copy that to my clipboard. Come down and paste it in between the prepend and the append group. Then I'll put a span in the prepend section, and we'll give it a class equal to input-group-text, and I'll close off the span, and in the span I will put the word go, and I'm going to set the margin top of this to a setting of five as well, and I'll copy the span, and I'll paste it in the append group, and I'll change Go to Now. So if you look up in Chrome you can see a field, and it has two text spans before and after it that says Go and Now, and somewhere along the lines I messed up the previous one, so I'm just going to delete it, so it doesn't end up confusing us. Now you've seen me type a lot in this module, so I'm just going to pull over some code to show you the next thing. I'll copy it to my clipboard, and I'll paste it, and I'm going to tab everything over, and I just want to show you the three different sizes. So this is the default size, and I'll make more room for my interface. I'm going to change the three to a five. I'll copy the whole thing to my clipboard, paste it above it, and I'm going to add a class to the opening div that says input-group-sm for small, and you can see up in Chrome right now we have a much shorter field than the default one. I'm going to change the bottom margin to two. Now I'm going to scroll down to an open area, add more room, and I'll paste it again, and this time in the opening class I'm going to change this second one to three as well. I'm going to add a class to this one that says input-group-lg for large, and now up in Chrome you can see that there are three fields, and they all differ in size, and the font size is different as well. So in the next video I am going to show you radio buttons, checkboxes, and dropdown menus, and I'll see you there.

Radios, Checkboxes, and Select Menus
In this clip we're going to look at checkboxes, radio buttons, and select menus. So I'm going to start off by entering a div, and we'll give it a class of input-group, and then we'll also set the margin bottom to a setting of three, and a margin top setting of three, and I'll close off the div and open it up, and then in between the div tags I'll put in a new div with a class of input-group-prepend, and I'll close off that div, and I'll open that one up, and inside of that one we'll put another div, and this one'll have a class of input-group-text. I'll close off that div, open it up, and I'll set in an input tag, and we'll set the type equal to checkbox. Put an aria-label in there, and we'll set it equal to checkbox. Close off the input tag. I just noticed I have an equal sign in the opening class, so I'll delete that, and now we can see it in Chrome. Put a return after the closing div of the first input group prepend, and I'll put in another input, and we'll set the type of this equal to text, and we'll give it a class of form-control, and we'll set the aria-label equal to text input, and I'll close that one off, and now you can see we have a field after our checkbox in Chrome. Go over to Chrome and type in Alice, and hit the checkbox, and everything's working. Go back to Brackets. I'm going to grab this whole div class, copy it to my clipboard, paste it right underneath, and I'm going to change the word checkbox to the word radio, and now you can see we have a radio button there. Copy that to my clipboard, and I'll also change the aria-label. So there we have a checkbox field and a radio button field, and I'll go to Chrome and click on the radio field. Now because you've seen my type a lot, I am going to go and get more code from my code. txt file. I'll copy the entire thing to my clipboard, and I'll paste it underneath everything else, and in the opening div after form-group I'll put in a space, and we'll set the margin top to five, and the margin bottom to five, and you can see right there we have a dropdown menu. So to create a select menu all I need to go is to the opening select tag, and before the word class I'm just going to add the attribute of multiple, and right away in Chrome now we have a field with a scroll box in it, and we can select different things inside there. I'm going to copy another code chunk from my code. txt, and after this character select I'm going to paste it. Inside that div I'm going to put a button with a class of btn space btn-info, so we have a blue button, and then I'm going to add the dropdown class, hyphen toggle, and we'll set the type of this equal to button, and we'll set the data-toggle equal to dropdown, and I'll close that off, and in between the opening and closing button tags I'll just go ahead and enter the word Characters, and now you can see in Chrome we have a blue button with the dropdown arrow on it. Now we need to add the aria stuff, and I'm just going to copy this again, from my code. txt file, so you don't have to watch me type it. I'll paste it there, and that's good. Put in a return. Go back to the code. txt file, and I'm going to copy what goes inside the menu, so you don't have to watch me type that either. I'll paste it in place, and now if we go back to Chrome you can see that we have a dropdown menu, including a separator, and that's a look at how you can do radio checkboxes and select menus.

Summary
In this module we learned about form classes in Bootstrap 4. We started by building a plain vanilla HTML form. Then we enhanced that form with Bootstrap 4 form classes. We added the form check classes to enhance radio buttons and checkboxes. We discovered inline forms. We talked about multi-column forms. Then we added validation classes. We examined multi-sized fields and added stuff before or after form fields. Finally, we selected menus, added checkboxes and radio buttons to the fields. In the next module we will work with jumbotrons and some other Bootstrap components.

Other Bootstrap Components
Introduction
In this module we will learn about Bootstrap for Components. We'll start by exploring the jumbotron. Next, we'll build an animated Bootstrap Carousel. We will discover how to make hidden areas on an HTML page, and show them at a touch of a button. Finally, we'll dig in to making a Bootstrap accordion widget, so let's get started.

Jumbotron
In this video we'll be playing with the Bootstrap 4 component, Jumbotron. In our open working file I'm going to start off with adding a div, and then we'll add a class of jumbotron. Close off the div, open it up. In the container I'm going to add a margin top setting of five, so we can see it a little bit better in Chrome underneath Brackets. Then I'll add a new div with a class of container, close that off, and open it up. We'll add an h1 tag, and then we'll add paragraph tags. I'm going to go over to my jumbotron. txt, copy See Jumbo the Elephant, and paste it in the h1 tags. Then I'll grab the line underneath it, P. T. Barnum presents, and paste that. I'll move my cursor to the opening h1 tag, and I'll add a class, and we'll set it to display-4. Then I'll go to the paragraph tag, and we'll add another class, and we'll call that lead. Set the color to a light gray, so we'll type in text-secondary. Go over to Chrome. It looks good. I'll go up a little bit, and pull the interface down, and by moving Chrome's interface back and forth you can see that it is responsive. So I'll make room for Brackets again, by pulling Chrome down, and we'll scroll underneath everything. I'm going to copy this whole thing to my clipboard, and I'm going to paste it in front of the div with the container class. Go back to Chrome, and now you can see that Jumbo the Elephant goes from the browser edge to the browser edge, and again, it is responsive, but it's not constricted by the container div. Go back to Brackets. After the title tag I'm going to add a style. Copy the class of jumbotron to my clipboard. Go to the style tags, open it up, dot, and paste jumbotron, add curly braces, open those up, and we'll set the background image to a URL, and we'll go to the images folder, and there's the elephant-jumbo-gray. Then we'll add a background-repeat, and we'll set it to no-repeat. We'll add a background-size and set it to cover, add a background-position, and we'll set it to center top. Go over to Chrome, and hit the Refresh button, and now you can see the actual Jumbo the Elephant in the background in both jumbotrons. And that is why the word jumbo means large. It's because of this P. T. Barnum elephant. So I broke away from the Alice in Wonderland theme just to tell you that. Moving the Chrome interface, you can see that it is still responsive. I'm going to go back to Brackets, scroll around. In the existing jumbotron I'm going to add another class that says, jumbotron-fluid, and I forgot the t, so I'll add it, and now when I resize the Chrome interface you can see that the elephant photo is resizing smoothly rather than jumping around at the breakpoints. Pull up Chrome, demonstrate it with both versions, so you can see the jump points in the lower one, and the smoothness in the upper one. Move Chrome back down out of the way again. Go back to Brackets, add a new div after the first jumbotron, and we'll add a class of jumbotron again. I'm just going to copy this first line, and I'll paste it since it is the exact same class in there. I already have the closing div tag below. I'm going to copy the h1 and paste it, and then I'll copy the p with the class in there, and paste that. Add a closing paragraph tag. Go back over to my jumbotron. txt file, and I'm going to grab this whole second line here, which is slightly longer than the other one, and paste it. Move my closing p tag, and right underneath it I'm going to add a horizontal rule with a class of margin vertical, a setting of four. Close that off. I add a new paragraph tag, go back to my jumbotron. txt file, grab this paragraph I got from a newspaper from that era, and paste it, and I'll add an anchor tag with a class of btn space btn-primary, and then we'll add btn hyphen large, since it's a jumbo sized piece. Then I'll add an href, then I'll add the role, a button, to my anchor tag. Then I'll close off the anchor tag, and we'll add, Buy Tickets Here. Go back to Chrome, scroll down, and there it is, although it goes right up to the edge. It is responsive though. So I'm going to go back into Brackets, and in the opening class of the div I'm going to add a padding with a setting of three. Move Chrome back up, refresh the page, and you can see we have a little bit more room now in our jumbotron. The text is now moved away from the border of the image. Close down the interface, open it up again, to show the responsiveness of it, and there we have our jumbotron. In the next video we're going to explore Bootstrap 4 Carousels, so I'll see you there.

Carousels
In this video we'll be building four versions of this Bootstrap 4 JavaScript carousel. Each version gets a little bit more complicated, and that's why we're building four of them in this one video. So what I'm going to do is go to Brackets, I'm going to type in an image tag, and we'll set the source equal to image1. Then I'll add an alt tag, and we'll set it to first. Close that off, and I'll duplicate it three more times by using Command+D. Go through and change the image to two, three, and four. I'll scroll in Chrome, and you can see the images. Then I'll hold down my Option key and drag upwards to grab all four images. I'll type in a class, and I'll close it off and go backwards with my arrow key, then we'll set it to display hyphen block or d-block, space, the width will be 100, so it's w-100. Then I'll go to the second alt tag and change it to second, the third and change that to third, fourth, and change that to fourth. Hold down my Option key and slide up in front of all the image tags, and we'll add a div, and we'll give it a class of carousel-item. Close off the div tag. I'm going to use my arrow keys to go to the end of the closing div tag, and I'll backspace that away, and then after the first one I'll add a closing div tag, add a closing div tag to the second one, to the third one, and to the fourth one. Then in the first div class I'll add the word active, and right away in Chrome you can see the one picture is there now. I'm going to select all these items, and wrap them in a div using Shift+Command+A in Emmet, clean up my Brackets, so everything's neat. We'll add a class to this first opening div tag of carousel-inner. Then I'll wrap this whole thing in another div, and we'll give it an id of carouselExampleSlidesOnly, and then we'll give it a class of carousel space slide, and we'll give it a data-ride of carousel, and I'll close that div off, cut the closing div tag, and paste it underneath all the images, and we'll go to Chrome, and there we have an animated carousel. And I'll let it play. I'll move Chrome down. We'll scroll down to the classes in the opening div. Instead of sliding right to left, we can also make the images cross dissolve, so all I need to do is add the carousel-fade class, go back into Chrome, and you'll be able to see the images now fade into each other. I'm going to delete that from my opening div tag. I'm going to change the id name of this to ExampleControl. Add a space underneath the images, and create an anchor tag with a class of carousel-control hyphen preview or prev. We'll set the href equal to, I'm going to get rid of this extra s. We'll set it to the id of the images, so I'm going to copy that id to my clipboard, and I'll paste it in the href after a hashtag because this will be using jQuery. Then I'll put in a role, and we'll set the role to button, and we'll set the data-slide to prev, p-r-e-v. I'll close off the anchor tag, and in between the tags I'll put a span with a class of carousel-control hyphen preview hyphen icon, and we'll set the aria-hidden to true, and I'll close off that span. Go to the end of the line and add a new line, and we'll add another span, and we'll add the class of screen reader or sr-only. I'll close off that span, and I'll put the word previous between the span tags. I'm going to copy the whole anchor tag to my clipboard, and then I'll add a new line underneath it and paste it, and I'll change prev to next, and I'll change the icon from preview to next, and then I'll change the word to Next, and finally, I'll change the data-slide to next. So we go over to Chrome, you can see that the arrows are now working, and we can control the picture. I can force it to go right or left. To continue on with our quest to make this more complicated, now we'll add the indicator. So I'll scroll back up and just underneath the opening div tag I'll add an ordered list tag with a class of carousel-indicators, and I'll close off the order list tag and open it up, and we'll add an li tag, and in that tag we'll add a data-target equal to hashtag, and I'll copy the id, and paste it, and after that we'll add a data-slide-to, and we'll set that to 0. Close off the li tag, and I'll put my cursor at the end of the line, and duplicate it three more times, and then I'll change the numbers, the second one to one, the third one to two, and the fourth one to three because, remember, in JavaScript we start counting from 0. Then I'll go back in front of data-target, the first one, and I'll add a class, and we'll set it to active, so the first one's active. We'll go over to Chrome, and I'll pull this up, and now you can see we have little indicators, and when you click on them the pictures move around. We can go to any picture now. So now I'll go back to Brackets, and I'm going to move this image tag down to its own line, and then I'll move the closing div down to its own line, and this is where we're going to add captions. So I'm going to add a div, and we'll give it a class equal to carousel-caption, and then we'll set the display hyphen none, and then we'll set the display at a medium size to block. I'll close off the div and open it up. Then we'll add an h5 tag, and I'll put in return, and we'll put in a paragraph tag. So rather than have you watch me type this all in, I already have it all prepared for us in carousel-quotes. txt, so I'll copy the first one into my clipboard, and I'll replace those two tags I just typed in with the text from that file. I'll tab everything over, and I'm going to copy this whole div with all the classes to my clipboard, and we'll go down to the next carousel item, put the image on its own line, move the closing div tag to its own line, and then I'll make room and paste it. And once again, we'll pull over carousel-quotes, and I'll copy the information for the second picture to my clipboard, and I'll replace this current text with it by pasting. I'll tab it over, and I'll let you do the final two in the series. In the meantime, I'll go back over to Chrome, and we have the arrows, like we did in the beginning, and we have the captions, and we can go back and forth. In the next video we'll be working on Bootstrap collapse components, so I'll see you there.

Collapse
In this video we'll create buttons that open and close hidden areas on your web page. I'll start by making more room in the working file. Then I'll add paragraph tags, and inside those I'll add anchor tags, and we'll call this Anchor Alice. Inside the opening anchor tag I'll add a class of btn btn-info to make it light blue. Then I'll set the data-toggle equal to collapse. Then I'll set the h reference equal to the id of our collapsible area, which we haven't created yet, and because we're using jQuery I'm using a hashtag. Then we'll set the role equal to button, and we'll set the aria-expanded equal to false. Then we'll set the aria-controls equal to, and I'll just copy and paste the collapseAnchor. I'll put in a new line, and then we'll add a div, and we'll give it a class equal to collapse, and then we'll give it the id of collapseAnchor. Close that off, and open up the div, and inside there I'll nest another div, and this one we'll give a class of card, and then card-body. Close that div and open it up, and then we'll add paragraph tags, and I'm going to go over to collapse-quote. txt. Copy and paste that quotation, and if we go over to Chrome and click on the Anchor Alice anchor tag we can see the text open and close from the hidden area. I'm going to add a picture, so I'll put in an image tag, and we'll set the source equal to image alice. jpg. Then I'll add a class, and we'll set the class to image-fluid, so it becomes responsive, and then we'll float the image to the left, and then we'll add the clearfix. I'll close off that image tag. We will go back to Chrome, click on Anchor Alice, and now you can see that a dropdown contains an image in it. Go back to Brackets. I'm going to do the exact same thing, except with a button now, but first I'll stick it in hr class, and we'll separate the two with a margin setting of five. Close off the horizontal rule. I'm going to copy the very first one to my clipboard, and I'll paste it right underneath the horizontal rule, and this time I'm going to change the name from collapseAnchor to CollapseButton, and we'll float the picture to the right, so we can tell the difference between the two when we look at them. Scroll back up. I'll put some spaces after the hr tag, and this time we'll type in button, close off the button tag, and open it up, and then we'll put in Button Alice. I'll add my cursor to the opening button tag, and we'll add a class of btn btn-success, and I'll get rid of that extra hyphen I threw in there. Go ahead and copy the href, paste it. Then we'll go up and copy the data-collapse in href. After that we'll add a data-target, and we'll set it to the same id, and I'll add a hashtag in front of it. I'll go back up to the top and copy the other aria tags, paste those in place. I'll go ahead and copy the CollapseButton to my clipboard again, and paste it in the aria controls. I'll open up the first one, open up the second one. So that is how you make a collapse tag inside of Bootstrap 4. In the next video we will create an accordion using the Bootstrap 4 components, and I'll see you there.

Accordian
In this video we're going to create the Bootstrap 4 accordion component. We'll start off in our working file and add a div and give it a class of accordion, and then we'll set the id equal to accordionExample. I'll close off the div and open it up. Then we'll nest another div inside of it, and this one we'll give a class of card. Close off that inner div, go to the end of it, and I'm going to duplicate it three times, so this will represent each area that we can open up. I'll put my cursor between the opening and closing div of the first one, and we'll open it up, and I'll add another div inside of it, and this one we'll set to a class of card-header, and we'll give it an id of headingOne. I'll close off that div, I'll copy that whole div to my clipboard, and I'll open up the second div of card, and paste that one. Change the One to Two. Go to the third, paste that in there, and we'll change the One to Three. I'll scroll back up now, and we'll go after the very first div, and I'll put in a new line, and we'll add another div, and this time we'll give it an id of collapseOne, and I'll give it a class of collapse and then show, and then I'll add an aria-labelledby tag, and inside that we'll put in headingOne. Then we'll add a data-parent, and set it equal to, and I'll copy the id of the first one, and then I'll paste it in between the quotes. Then I'll close off the div, copy the whole div to my clipboard, go down to the second one, add room and paste, and we'll change the word One to the word Two again, and then I'll go down to the third one, go to the end of the first line, make room, paste, and we'll change the word One to the word Three, and we'll do it over in the id as well, and I need to go back up to Two and change that id as well. Then I'm going to delete the class show from the third one, and then go up and delete it from the second one. We only need the class to show in the first one. Put a hashtag in front of accordionExample in each one of these because we're using jQuery. Open up heading number one, and then I'll open up heading number two, open up heading number three. Go back to heading number one, and we'll stick in an h5 tag, give it a class of margin bottom, a setting of 0, copy that whole thing, and I'll paste it into two, and then I'll paste it again, into three. We'll open up the first h5 class, and we'll place the tag button. Then I'm going to pull over my accordion-quote. txt file, grab the first one, Alice Quote, and paste it between the button tags. I'll go to the opening button tag and add a class, and we'll set it to btn btn-link. Then we will set the type of it to button, and we'll give it a data-toggle, and we'll set it to collapse, and then we'll also give it a data-target, pick out collapse number one id, and paste it into the data-target quotation marks. We'll add the aria-expanded, and set that to true, and then we'll add aria-controls, and we'll copy collapseOne from the id tag, and paste it between the quotation marks. Then I'll put Alice Quote on its own line, and I'll put the closing button tag on its own line. Line everything up, we'll copy the whole thing to a clipboard. I'll go down to the second h5 and open that, and we'll paste it, and we'll add the class collapsed to the button. We'll change collapseOne to collapseTwo. We'll change aria-expanded to false, and I'll go over to accoridan-quotes. txt file and copy The Duchess Quote to my clipboard, and we'll paste it there. Move that back out of the way, and we'll change collapseOne in the aria-controls over to collapseTwo. Copy the whole thing to my clipboard. Go down to the third one. Open up the h5 tags, and paste again, and once more we'll go back to our accordions quote, copy King of Hearts quote, paste that as the title in the button tag, go to two and change it to three, copy that whole thing, replace it in the target. Then I'll go down and open up the div underneath it and we'll add a new nested div. We'll give it a class of card-body. I'll close off that div and open it up, and then we'll go back, and this time I'll grab The King of Hearts Quote, and copy it to my clipboard, and I'll paste it. I'll copy the whole div with the card-body class. Go up to example number two, and I'll open up that div, and then I'll paste it once more. Then we'll swap out the second quote with the third one. Replace it. Then we'll go up to the first one, then I'll copy it once more, open up the div, and paste it again. Go back to accordion-quotes, copy the first quote to my clipboard, and replace it in the first card setting. Now we'll scroll down inside of Chrome, open it up, and there we go. We have an accordion Bootstrap 4 component working.

Summary
In this module we learned about Bootstrap 4 components. We started by exploring the jumbotron. Next, we built an animated Bootstrap carousel. We discovered how to make hidden areas on your HTML page and show them at the touch of a button. Finally, we dug into how to make a Bootstrap accordion widget. In the next module we will work with JavaScript and Bootstrap, best friends forever. See you there.

JavaScript and Bootstrap BFF
Introduction
In this module we learn about Bootstrap 4 JavaScript and the JavaScript library, jQuery. We'll start by building Tooltips. Next, we'll enhance our web page with pop-up modals. We'll learn about adding popovers. Then we'll discover Scrollspy. Finally, we'll talk about JavaScript events in Bootstrap. So let's get started.

Tooltips
In this clip we'll take a look at Tooltips. We'll start off in our working file, and the first thing I'm going to do is add an additional class to the opening container div, a padding vertical the setting of five. Then we'll go down to the next line, and we'll add a button tag, and we'll set the data-toggle equal to tooltip. Then we'll add a data-placement equal to top, and then we'll set the class equal to btn btn-success to make a green button. We'll set the title equal to, and I'm just going to leave that blank for now, and we'll close off the tag, and inside that we'll type in Rollover Me. I'm going to widen my interface in Brackets, so you can see the whole thing, and at the end I'm going to place my cursor, and we'll duplicate it three more times. I'm going to change the button colors, the last one to info, the third one to primary, and the second one to danger, and then I'm going to add titles, and this is the text that's going to go inside the Tooltip. So the first one I'll type is your message here. Copy that, and I'll replace each of the title attributes with the same message. The next thing we're going to do is change the placement where the little dialog box will open up, so we're going to go to data-placement, I'm going to change the second one to right, I'm going to change the third one to bottom, and the fourth one to left. Now in order to get this to work we have to add some JavaScript or jQuery, so I'm going to scroll down to the bottom, and after all of the link scripts I'm going to make some room, and we'll add new script tags, and then what we're going to do is add some jQuery. So I'll type in a dollar sign for jQuery, add parentheses. Inside there we're going to add a function, so I'll type the word function, parentheses, curly braces, open them up, and then we'll set in some more jQuery, dollar sign, parentheses, quotation marks, and what we're going to look for is any attribute that says data-toggle equals tooltip, and I'll put that in square brackets. Use my arrow key to go to the end of the closing parentheses, type a dot, and then we'll type in tooltip parentheses, I'll add a semicolon, that's optional, and we're done. I'll scroll back up again. Let's go to Chrome and roll over our buttons. Here's the green one, which goes to the top, the red one, which goes to the right, the blue one, which goes to the bottom, and the last one, which goes to the left. Go back to Brackets. Now what I want to do is show you how to add message with embedded HTML tags. I'm going to delete the last three buttons. Delete what's inside your title attribute, and I'm going to replace it with an h4 tag, and we'll say Alice Sez, close off the h4 tag, add paragraph tags, put the words Curiouser and Curiouser in between the paragraph tags. Then in front of the title attribute I'm going to add a new attribute that says data-html equals true. Close that attribute off, and now if we go over to Chrome I'll reload the page. When we roll over the button we can see that we have the HTML5 active. So that's a look at tooltips. In the next clip we'll take a look at pop-up modals, and I'll see you there.

Modal
In this clip we're going to talk about modals. So I'm going to start off with my working file, and we're going to add padding vertical with a setting of five, to make more room. Then we'll add a button tag, and we'll set the type equal to button. We'll add a class, and we'll set that to btn btn-primary. Give us a nice blue button. Then we'll set data-toggle equal to modal, and data-target equal to hashtag myModal. Close off the button tag, open it up. In between the tags we'll type, How Long is Forever? Underneath the button I'm going to add a new div, and we'll give it a class of modal. Then we'll give it an id, and I'll copy my modal from the data target, and I'll paste it into the id, and then we'll set the tab index equal to a -1, and then we'll set the role of this equal to dialog. Then we'll set the aria-labelledby equal to myLabel. We'll set the aria-hidden equal to true. Close off the div and open it up. I'm going to make some more room and use the arrow keys to go back to the top. We'll add a new div, and we'll set the class equal to modal-dialog. Go over and set the role equal to document. Close off the div and open it up. Scroll down. I'm going to get rid of the extra space between these two closing div tags. Open up the inner div tag. Then I'm going to place another nested div, and we'll set this div's class equal to modal-content. Close off that div, open it up. Once more, get rid of the extra space in between the closing divs. Add another inner div. This time we'll have a class equal to modal-content. Close off that div. Open it up. I'm going to copy the whole thing to my clipboard, and paste it right underneath, and we'll change the word content to the word body, and I'll change this content to header. Inside the modal-header tag we're going to --- put h5 tags, and we'll set it to the answer is, and an ellipses. I'll add a class to the opening h5 tag, and we'll set that equal to modal-title, and we'll set the id equal to, and I'll copy my label again, to my clipboard, and I'll paste it into the id tag. Then underneath that I'm going to add a button, give it a type of button, and we'll add a class equal to close, and then we'll set the data-dismiss equal to modal, and finally, the aria-label equals close. Close off that button tag. Open it up. I'm going to add a span tag with an aria-hidden equal to true. Close off the span tag, and then we'll set in an HTML special character of &times;, and that will give us an x as our button. Now I'll scroll down to the modal body, and we'll add a left double quote, special HTML character, and then I'll add sometimes just one second, and I'll close off with an ampersand right double quote semicolon special character. We'll put in a break, I'll put in a dash, and then we'll say The White Rabbit. Underneath that div I'll add another div, and this time we'll give it a class of modal-footer. Close off that div. Open it up. We'll add a new button with a type of button, and we'll add the class equal to btn btn-secondary, so it's a gray button, and then we'll add a data-dismiss, and set that equal to modal. Close off that button, and inside there I'll just put the word close, and I just noticed I have model instead of modal here, so I'll change that to a letter a, and I also have it here, so I'm going to change that to the letter a. We'll go over to Chrome, and then click on this, and now you can see a modal opens up. Close it off. Now I want to show you that you can use the modal with a form inside of it as well, so I have some form code already typed out in the working files. Copy it to my clipboard. I'm going to replace the modal body quote with the form. Reload the page, click on it, and now you can see we have a nice form inside of our modal. Click on the close button, and it's hidden, and that is a look at modals. In the next clip we're going to take a look at popovers, and I'll see you there.

Popovers
In this clip we're going to take a look at popovers, and I have my working file open. Right away I'm going to go to the opening container div and add a margin vertical with a setting of five. Then we'll add a paragraph tag with a class of margin vertical setting of five. Inside there we'll put a button tag, and we'll set this type equal to button. Close off the button tag, and inside there it'll say Who in the world am I? Scroll down to the very bottom underneath all of our existing scripts. We're going to add some custom scripts, so I'll add script tags. In there I'll put a dollar sign for jQuery, a set of parentheses, put in a function, another set of parentheses, curly braces, open those up. Inside that we'll add a dollar sign, parentheses, quotation marks, brackets, and in that we'll put data-toggle equals popover, and I'll make sure the quotation mark is closed. Go to the very end and add a dot, and then we'll type popover, parentheses, semicolon. I'm going to copy this data-toggle equals popover attribute to my clipboard, scroll up, paste it into the opening div of the button tag. Then we'll add data-placement equals left, so it's on the left side, and then we'll add a class equal to btn btn hyphen large. Then we'll add a btn-primary, so it's blue. I'll add in a title, and inside here I'll say Alice sez, and it'll say data-content equals Alice's quote, and this says, Ah, that's the great puzzle. I'll make my interface wider in Brackets, so it's all on one line. I'm going to go over to Chrome, and then reload the page, and when we click on it it says, Alice says, Ah, that's the great puzzle, so it's working. Then I add text-center to my opening paragraph tag, so the button is centered, and now you can see it's on the left, because I set it to left, but it was on the right. Now we can set it to the right, reload the page and click on it, and now it's to the right. We could also set it to the top and bottom. Copy the whole thing to my clipboard and paste it, and this time I'll change the data-placement to top, reload the page, and click on it, and now it's at the top, and I'll change the one that says right to bottom. Reload the page, and click on it, and now it appears on the bottom. Now if you want these things to fade in and out you add a data-animation attribute, and you set it to true. Go back to Chrome, reload the page, and now you can see that the popover fades in and out when we click on it. So that's a look at popovers. In the next clip we're going to look at Scrollspy, and I'll see you there.

Scrollspy
In this clip we're going to look at Scrollspy, and we played with this way back in module three when we made a navigation bar. So right now I am on the getbootstrap website, and in the documentation you can see an example of what we're going to be building here using a navbar. When you scroll down on the content notice that the button changes which one is highlighted. It also works in the dropdown menu. As I scroll down further you can see that it does a submenu as well. So that is basically what we're doing in Scrollspy. The definition Bootstrap gives it, automatically update Bootstrap navigation or list group components based on the scroll position to indicate which link is currently active in the viewport. So I'll go back to the documentation here, and you can see another example with a navbar, and scroll down and you can see that we can have top level items and also sublevel items highlight as we scroll up and down this content. Alright, let's go over to Brackets. I'm going to pull up Chrome as well. Go down to our working file, and in the opening container tag I'm going to add a margin vertical of five again, and this time we'll set in a new div, and we'll give it a class of row because we're going to set up a multi-column thing here. Grab the closing div tag, paste it above the other closing div tag, and I'm going to add a remark because we're going to end up with a lot of closing div tags, and we have to know which one is which. Set it to end row, and close off the remark. I'll copy it to my clipboard, paste it right underneath, and we'll change the word row to the word container. Go back up and tab this in. Okay, so now we've got to set up two columns. So I'm going to create another div inside here, nest it, and this one we'll set to div, and we'll give it a class equal to column hyphen two, so it's two columns wide. Set my cursor at the end, duplicate it, and we'll change the 2 to a 10, so they add up to 12. Open up the first one, open up the second one, and then I'll paste the remark at the end of the closing div tag on column 10, and change it to column 10, and paste it once more, and change row to column hyphen two. Open up the first column. We'll add another div, and we'll give it an id of list-chapters, and then we'll add a class of list-group. Close off the div, open it up. I'll paste my remark once more, and change the word row to list-chapters, so we know which side is which. Open this one up. Try and close up the spaces between the closing div tags. Add an anchor tag inside of this list-chapters div. Give it a class of list-group-item, and then we'll give it list-group-item-action. Those are Bootstrap classes. We'll set the href equal to hashtag Chapter-1, which is an id we're going to apply later. Close off the anchor tag, and I'll just put Chapter 1 in this first one. Make my interface wider. Then I'll set my cursor to the end of this anchor tag, and duplicate it three more times. I'll change the second one to two, the third one to three, and the fourth one to four, and then we have to do the href id, so I'll change it to four, three, two, and one's already done, so close off that extra space. We're done with the first column, and in Chrome you can see we have a stack group of buttons. Let me pull it up a little bit. Go back to Brackets and adjust it. Now we'll work on the second column, but first I'll close up the space in between these closing divs, and we'll add an h4, and we'll set the class equal to text-secondary, so it's gray. Close off the h4 tag. I'm going to duplicate it three more times, and now we're going to pull over our existing scrollspy. txt file. I'm going to grab Chapter 1 and paste it in the first h4, Chapter 2, paste it in the second, Chapter 3, paste it into third, and Chapter 4, and paste it into fourth. So now we're kind of delineating the content for ourselves. Go back to the end before the h4 tag, and we'll set in a new div, and we'll give it an id. I'm going to copy Chapter 1 to my clipboard, and paste it in the new id. Then I'll copy the whole div, and paste it in between the first h4 and the second, once more between the second and the third, and again, between the third and the fourth. Then we'll change it to chapter four, chapter three, chapter two, and chapter one's done, but I'll space it over. Go to the end of the first h4 tag, add a space, and we'll add in paragraph tags, and I'll just put three dots in there for now. Then we'll create more space, and we'll add a button tag, and in this one we'll give it a class of btn btn-secondary, and we'll also set the margin bottom with a setting of five, and we'll give it a role of button. We'll have it say Read More with an ellipses. Go to the end of that line, add another line, and we'll add a horizontal rule tag. Copy these three things to my clipboard, and now I'm going to go at the end of h4 for Chapter 2, add space and paste. Go to the end of Chapter 3 h4, and paste it again, and once more at the end of the Chapter 4 h4, and paste it again. So now you can see we have some content going on inside of our second column. Go back to Brackets. We're going to make some room after the opening class of column 10. We're going to nest all these items in another div, so we'll give it a data-spy, and we'll set it to scroll, and then we'll set data-target, and we'll set that equal to hashtag list-chapters. Go to the end, and add data-offset, and we'll set that equal to 0, and then we'll set in some classes, so we'll give it smallBox, and that's my own class, and I'll close off the div, copy the closing div to my clipboard, and we'll scroll all the way to our content after that hr tag, and I'll paste it, and then once more I'm going to give it a remark, and we're going to say end data-spy. Now we need to add the CSS to that custom class I just said in there. So I'll go after the title tag and I'll add some style tags. Open those up. Inside there I'll put smallBox, add curly braces. I forgot the dot, so let's add that. Give it a width, and we'll set it to 100% of the parent container. We'll give it a height, and this we'll set to 200px, and then we'll set the overflow equal to auto, and then finally, we'll add some padding to the left of 10px. Let's go back down to our content now, and in the Scrollspy opening div we'll add more classes, and we'll set border border-primary to give it a blue border. Now I'm going to pull over my scrollspy. txt, and in here I have two opening paragraphs from each chapter, so I'm going to copy the first one, and I'll paste it where the temporary p tags were, and I'll tab it over. Scroll down to where chapter two's paragraph tags are, go to scrollspy. txt, and I'll copy those two paragraphs over, and I'll paste it in place. Go to the third one, copy that to my clipboard. Go to chapter three, select the paragraph tags, paste that one, and tab this one over, and then finally, we'll grab chapter 4's paragraphs. Copy that to my clipboard, and replace these two paragraph tags with the chapter four, tab that one over. So now we can go into Chrome, and you can see we have two columns; content to the right, buttons to the left, and everything's ready to go, but we have to add our jQuery, so I'm going to go back to Brackets, and scroll down to the bottom after all the script tags, add new script tags, open that up. In between there I'm going to add a dollar sign, parentheses, single quotation marks, brackets, and we'll put in data-spy equals scroll. Go to the end of our line here, add a dot, and we'll say each parentheses, and inside of there we'll set a function parentheses curly braces, open those up, and we'll create a variable of spy with a dollar sign in front of it, and we'll set that equal to this. scrollspy. Parentheses inside there. We'll put the word refresh. Forgot to add the closing double quotation mark on my attribute. Go back to Chrome and open it up, reload the page. We can see as we scroll up and down through the content where we are in the chapter menu changes. We can also click on the buttons and hop around my content that way, and I can use the scroll bar. So that is a look at Scrollspy. In the next clip we'll talk about events and methods, and I'll see you there.

Events
In this clip we're going to talk about JavaScript events. Many of the components we had outside of this module use JavaScript events. You can find events listed for the component at the end of the documentation about the component. You'll also see usage suggestions and methods listed. For instance, here's the one about the alerts. Bootstrap defines the alerts as a way to provide conventional feedback messages for typical user actions. You can see in the gray area how to set up your jQuery function. The close. bs. alert fires immediately when the close instant method is called. The closed. bs. alert fires when the alert has been closed, and waits for all the CSS transitions to complete, so usually you have two sets that you can choose from, one that fires immediately, and one that waits for the CSS to complete. The carousel has two events, slide. bs. carousel, and slid. bs. carousel. The first event fires immediately when the slide instant method is invoked, and the second is fired when the carousel has completed a slide transition. Furthermore, some events have additional properties. In the case of the carousel, these four are listed; direction, relatedTarget, from, and to. Here's a list of all the components that have events and methods listed in the documentation. Refer to the documentation when you want to extend the functionality of your JavaScript. In the next module we'll sum everything up, and I'll see you there.

Summary
In this module you learned about Bootstrap 4 JavaScript and the JavaScript library, jQuery. We started by building Tooltips. Next, we enhanced our web page with pop-up modals. We added popovers. We discovered Scrollspy. Finally, we talked about JavaScript events in Bootstrap. In the next module we sum everything up.

Summary
Summary
In this course we learned about Bootstrap 4. We covered a lot of material in a short amount of time, and I hope you enjoyed using Bootstrap 4's amazing frontend component library. You saw the module nature of Bootstrap 4, and hopefully you realize you can quickly build a complicated website simply by using pre-existing code that you can copy and paste from the getbootstraps. com documentation section. I truly enjoyed introducing you to this wonderful library. I challenge you to try your hand at simply mocking up a web page with nothing but Bootstrap. I've done it, and Bootstrap made creating a good looking website quick and easy. So for now, this is Mario, and until next time, thanks for watching, and I hope you enjoy Bootstrap, and that I made learning it easy with my course, Bootstrap 4 for the Developer.